var search_data = {"index":{"searchIndex":["hitimes","error","metric","mutexedstats","paths","stats","timedmetric","timedvaluemetric","valuemetric","duration()","lib_path()","measure()","measure()","measure()","measure()","new()","new()","new()","new()","new()","now()","now()","rate()","root_dir()","running?()","running?()","sampling_start_time()","sampling_stop_time()","split()","split()","start()","start()","stop()","stop()","sub_path()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_json()","unit_count()","update()","utc_microseconds()","contributing","history","manifest","readme"],"longSearchIndex":["hitimes","hitimes::error","hitimes::metric","hitimes::mutexedstats","hitimes::paths","hitimes::stats","hitimes::timedmetric","hitimes::timedvaluemetric","hitimes::valuemetric","hitimes::timedvaluemetric#duration()","hitimes::paths::lib_path()","hitimes::measure()","hitimes::timedmetric#measure()","hitimes::timedvaluemetric#measure()","hitimes::valuemetric#measure()","hitimes::metric::new()","hitimes::mutexedstats::new()","hitimes::timedmetric::new()","hitimes::timedvaluemetric::new()","hitimes::valuemetric::new()","hitimes::timedmetric::now()","hitimes::timedvaluemetric::now()","hitimes::timedvaluemetric#rate()","hitimes::paths::root_dir()","hitimes::timedmetric#running?()","hitimes::timedvaluemetric#running?()","hitimes::metric#sampling_start_time()","hitimes::metric#sampling_stop_time()","hitimes::timedmetric#split()","hitimes::timedvaluemetric#split()","hitimes::timedmetric#start()","hitimes::timedvaluemetric#start()","hitimes::timedmetric#stop()","hitimes::timedvaluemetric#stop()","hitimes::paths::sub_path()","hitimes::metric#to_hash()","hitimes::stats#to_hash()","hitimes::timedmetric#to_hash()","hitimes::timedvaluemetric#to_hash()","hitimes::valuemetric#to_hash()","hitimes::stats#to_json()","hitimes::timedvaluemetric#unit_count()","hitimes::mutexedstats#update()","hitimes::metric#utc_microseconds()","","","",""],"info":[["Hitimes","","Hitimes.html","","<p>The top level module containing the contents of the hitimes library\n<p>use the library with:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;hitimes&#39;</span>\n</pre>\n"],["Hitimes::Error","","Hitimes/Error.html","","<p>Base class of all errors in Hitimes\n"],["Hitimes::Metric","","Hitimes/Metric.html","","<p>Metric hold the common meta information for all derived metric classes\n<p>All metrics hold the meta information …\n"],["Hitimes::MutexedStats","","Hitimes/MutexedStats.html","","<p>MutexedStats is the start of a threadsafe Stats class.  Currently, on\nMRIRuby the Stats object is already …\n"],["Hitimes::Paths","","Hitimes/Paths.html","","<p>Access to various paths inside the project programatically\n"],["Hitimes::Stats","","Hitimes/Stats.html","",""],["Hitimes::TimedMetric","","Hitimes/TimedMetric.html","","<p>A TimedMetric holds the metrics on how long it takes to do something. \nForexample, measuring how long …\n"],["Hitimes::TimedValueMetric","","Hitimes/TimedValueMetric.html","","<p>A TimedValueMetric holds the metrics on how long it takes to do a batch of\nsomething.something.  For …\n"],["Hitimes::ValueMetric","","Hitimes/ValueMetric.html","","<p>A ValueMetric holds the data from measuring a single value over a period\noftime.  In most cases this …\n"],["duration","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-duration","()","<p>The duration of measured time from the metric.\n"],["lib_path","Hitimes::Paths","Hitimes/Paths.html#method-c-lib_path","(*args)","<p>Returns The full expanded path of the <code>lib</code> directory\nbelow_root_dir_.  All parameters passed in are joined …\n"],["measure","Hitimes","Hitimes.html#method-c-measure","(&block)","<p>Hitimes.measure { } -&gt; Float\n<p>Times the execution of the block, returning the number of seconds it took …\n"],["measure","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-i-measure","( &block )","<p>Measure the execution of a block and add those stats to the running\nstats.The return value is the return …\n"],["measure","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-measure","( value, &block )","<p>Measure the execution of a block and add those stats to the running\nstats.The return value is the return …\n"],["measure","Hitimes::ValueMetric","Hitimes/ValueMetric.html#method-i-measure","( value )","<p>Give the <code>value</code> as the measurement to the metric.  The value is\nreturned\n"],["new","Hitimes::Metric","Hitimes/Metric.html#method-c-new","( name, additional_data = {} )","<p>Create a new ValueMetric giving it a name and additional data.\n<p><code>additional_data</code> may be anything that follows …\n"],["new","Hitimes::MutexedStats","Hitimes/MutexedStats.html#method-c-new","()",""],["new","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-c-new","( name, additional_data = {} )","<p>Create a new TimedMetric giving it a name and additional\ndata.<code>additional_data</code> may be anything that follows …\n"],["new","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-c-new","( name, additional_data = {} )","<p>Create a new TimedValueMetric giving it a name and additional\ndata.<code>additional_data</code> may be anything that …\n"],["new","Hitimes::ValueMetric","Hitimes/ValueMetric.html#method-c-new","( name, additional_data = {} )","<p>Create a new ValueMetric giving it a name and additional\ndata.<code>additional_data</code> may be anything that follows …\n"],["now","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-c-now","( name, additional_data = {} )","<p>Return a TimedMetric that has been started\n"],["now","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-c-now","( name, additional_data = {} )","<p>Return a TimedValueMetric that has been started\n"],["rate","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-rate","()","<p>Rate in the context of the TimedValueMetric is different than\ntheTimedMetric.  In the TimedValueMetric …\n"],["root_dir","Hitimes::Paths","Hitimes/Paths.html#method-c-root_dir","()","<p>Returns The full expanded path of the parent directory of +lib+going up the\npath from the current file. …\n"],["running?","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-i-running-3F","()","<p>return whether or not the timer is currently running.\n"],["running?","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-running-3F","()","<p>return whether or not the metric is currently timing something.\n"],["sampling_start_time","Hitimes::Metric","Hitimes/Metric.html#method-i-sampling_start_time","()","<p>The time at which the first sample was taken.This is the number of\nmicroseconds since UNIX epoch UTC …\n"],["sampling_stop_time","Hitimes::Metric","Hitimes/Metric.html#method-i-sampling_stop_time","()","<p>The time at which the last sample was takenThis is the number of\nmicroseconds since UNIX epoch UTC as …\n"],["split","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-i-split","()","<p>Split the current TimedMetric.  Essentially, mark a split time. This\nmeansstop the current interval and …\n"],["split","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-split","( value )","<p>Split the current metric.  Essentially, mark a split time.  This meansstop\nthe current interval, with …\n"],["start","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-i-start","()","<p>Start the current metric, if the current metric is already started,\nthenthis is a noop.\n"],["start","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-start","()","<p>Start the current timer, if the current timer is already started, thenthis\nis a noop.\n"],["stop","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-i-stop","()","<p>Stop the current metric.  This updates the stats and removes the\ncurrentinterval. If the timer was stopped …\n"],["stop","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-stop","( value )","<p>Stop the current metric.  The <code>count</code> parameter must be avalue\nto update to the <em>value</em> portion of the TimedValueMetric …\n"],["sub_path","Hitimes::Paths","Hitimes/Paths.html#method-c-sub_path","(sub,*args)","<p>Returns the full expanded path of the <code>sub</code> directory below\n_root_dir.  All_arg_ parameters passed in are …\n"],["to_hash","Hitimes::Metric","Hitimes/Metric.html#method-i-to_hash","()","<p>Convert the metric to a Hash.\n"],["to_hash","Hitimes::Stats","Hitimes/Stats.html#method-i-to_hash","( *args )","<p>return a hash of the stats.  By default this returns a hash of all statsbut\npassing in an array of items …\n"],["to_hash","Hitimes::TimedMetric","Hitimes/TimedMetric.html#method-i-to_hash","()","<p>Convert the metric to a hash\n"],["to_hash","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-to_hash","()","<p>Convert the metric to a hash\n"],["to_hash","Hitimes::ValueMetric","Hitimes/ValueMetric.html#method-i-to_hash","()","<p>Convert the metric to a hash\n"],["to_json","Hitimes::Stats","Hitimes/Stats.html#method-i-to_json","( *args )","<p>return a json string of the stats.  By default this returns a json stringof\nall the stats.  If an array …\n"],["unit_count","Hitimes::TimedValueMetric","Hitimes/TimedValueMetric.html#method-i-unit_count","()","<p>The sum of all values passed to <code>stop</code> or <code>skip</code> or\n<code>measure</code>\n"],["update","Hitimes::MutexedStats","Hitimes/MutexedStats.html#method-i-update","( value )","<p>Update the running stats with the new value in a threadsafe manner.\n"],["utc_microseconds","Hitimes::Metric","Hitimes/Metric.html#method-i-utc_microseconds","()","<p>The current time in microseconds from the UNIX Epoch in the UTC\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>Hi there!\n<p>I see you are interested in contributing. That is wonderful. I\nlove\ncontributions.\n<p>I guarantee …\n"],["HISTORY","","HISTORY_md.html","","<p>Hitimes Changelog\n<p>Version 1.2.2 2014-07-09\n<p>fix compilation issue with clock_gettime in libc (reported by …\n"],["Manifest","","Manifest_txt.html","","<p>.travis.yml CONTRIBUTING.md HISTORY.md LICENSE Manifest.txt README.md\nRakefile examples/benchmarks.rb …\n"],["README","","README_md.html","","<p>hitimes\n<p>Homepage\n<p>Github project\n"]]}}