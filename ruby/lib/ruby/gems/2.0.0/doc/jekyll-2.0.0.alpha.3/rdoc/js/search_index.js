var search_data = {"index":{"searchIndex":["jekyll","collection","command","commands","build","docs","doctor","new","serve","configuration","converter","converters","identity","markdown","kramdownparser","marukuparser","rdiscountparser","redcarpetparser","commonmethods","withpygments","withrouge","withouthighlighting","textile","convertible","deprecator","document","draft","entryfilter","excerpt","fatalexception","filters","generator","generators","pagination","gisttag","layout","layoutreader","page","pager","plugin","pluginmanager","post","publisher","relatedposts","renderer","site","cleaner","staticfile","stevenson","tags","highlightblock","includetag","includetagerror","postcomparer","posturl","url","utils","liquid","object","safeyaml","<=>()","<=>()","<=>()","==()","[]()","abort_with()","add_build_options()","add_code_tags()","add_code_tags()","aggregate_post_info()","allowed_custom_class?()","arg_is_present?()","array_to_sentence_string()","asset_file?()","backup?()","backwards_compatibilize()","base_directory()","basename()","blank?()","block_code()","block_code()","block_code()","build()","build()","build_index()","calculate_pages()","can_be_published?()","categories()","cgi_escape()","cleaned_relative_path()","cleanup()","cleanup!()","code_wrap()","collect_urls()","config_files()","configuration()","configuration_from_options()","conflicting_urls()","conscientious_require()","containing_dir()","containing_dir()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","converter()","converters()","create_blank_site()","create_error_page()","create_sample_files()","csv_to_array()","data()","data()","date_to_long_string()","date_to_rfc822()","date_to_string()","date_to_xmlschema()","debug()","deep_merge_hashes()","deprecated_relative_permalinks()","deprecation_message()","derive_base_directory()","destination()","destination()","destination()","destination()","determine_arguments()","dir()","dir()","directory()","display()","do_layout()","docs()","documents()","each_site_file()","ensure_leading_slash()","ensure_leading_slash()","ensure_not_in_dest()","entries()","entry_filter()","error()","escape_path()","excerpt()","excluded?()","existing_files()","exists?()","extname()","extract_excerpt()","extract_excerpt()","file_read_opts()","filter()","filter_entries()","filtered_entries()","first_page_url()","fix_common_issues()","formatted_topic()","fs_root()","generate()","generate()","generate_excerpt?()","generate_url()","getconverterimpl()","get_entries()","gist_script_tag()","glob_include?()","globs()","group_by()","groupable?()","has_relative_page?()","has_yaml_header?()","healthy?()","hidden_in_the_future?()","highlighter_prefix()","highlighter_prefix()","highlighter_suffix()","highlighter_suffix()","html?()","id()","id()","in_hierarchy()","include?()","included?()","index?()","info()","inherited()","inherited()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","init_with_program()","initialized_post_name()","inspect()","inspect()","inspect()","inspect()","inspect()","instantiate_subclasses()","item_property()","jsonify()","keep_file_regex()","layout_directory()","layout_directory_in_cwd()","layout_directory_inside_source()","layout_entries()","layout_name()","limit_posts!()","load_blahtext_library()","load_divs_library()","logger()","lsi_related_posts()","markdownify()","matches()","matches()","matches()","merged_file_read_opts()","merged_file_read_opts()","message()","mime_types()","modified?()","most_recent_posts()","mtime()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_dirs()","new_files()","next()","no_subcommand()","number_of_words()","obsolete_files()","output_ext()","output_ext()","output_ext()","output_ext()","output_ext()","paginate()","paginate_path()","pagination_candidate?()","pagination_enabled?()","parse_params()","path()","path()","path()","path()","path_relative_to_source()","permalink()","permalink()","permalink()","place_in_layouts()","plugin_allowed?()","plugins_path()","pluralized_array_from_hash()","populate_categories()","populate_tags()","post_attr_hash()","post_slug()","preserve_source_location?()","previous()","print_errors_and_fail()","priority()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process()","process_site()","publish?()","published?()","published?()","publisher()","read()","read()","read()","read()","read_collections()","read_config_file()","read_config_files()","read_content()","read_data()","read_directories()","read_drafts()","read_posts()","read_yaml()","read_yaml()","realpath_prefixed_with?()","related_posts()","relative_directory()","relative_path()","relative_path()","relative_path()","relative_path()","relative_path()","relative_permalinks_deprecation_method()","relative_to_source()","remove_leading_slash()","render()","render()","render()","render()","render()","render()","render()","render_all_layouts()","render_codehighlighter()","render_liquid()","render_liquid()","render_pygments()","render_rouge()","render_variable()","render_with_liquid?()","replace_generated_toc()","replaced_files()","require_all()","require_gems()","require_plugin_files()","reset()","reset_cache()","rouge_formatter()","run()","safe()","safe_load_file()","sanitize_filename()","sanitize_label()","sanitize_url()","sanitized_path()","scaffold_path()","scaffold_post_content()","set_timezone()","setup()","setup()","setup()","site_cleaner()","site_data()","site_payload()","site_template()","source()","source()","special?()","start_callback()","stringify_hash_keys()","stringify_keys()","subclasses()","subclasses()","symbolize_hash_keys()","symlink?()","tags()","template()","template()","template_page()","textilize()","time()","title()","titleized_slug()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_liquid()","to_render()","to_s()","to_s()","to_s()","to_s()","transform()","unescape_path()","uri_escape()","url()","url()","url()","url_placeholders()","url_placeholders()","url_placeholders()","url_template()","uses_relative_permalinks()","valid?()","valid?()","validate_file_name()","validate_params()","validate_path()","warn()","watch()","webrick_options()","where()","whitelist()","within()","write()","write()","write()","write()","xml_escape()","yaml_file?()","license","readme.markdown","mime.types","footer.html","head.html","header.html","default.html","page.html","post.html","index","main.css","feed.xml","index.html","index"],"longSearchIndex":["jekyll","jekyll::collection","jekyll::command","jekyll::commands","jekyll::commands::build","jekyll::commands::docs","jekyll::commands::doctor","jekyll::commands::new","jekyll::commands::serve","jekyll::configuration","jekyll::converter","jekyll::converters","jekyll::converters::identity","jekyll::converters::markdown","jekyll::converters::markdown::kramdownparser","jekyll::converters::markdown::marukuparser","jekyll::converters::markdown::rdiscountparser","jekyll::converters::markdown::redcarpetparser","jekyll::converters::markdown::redcarpetparser::commonmethods","jekyll::converters::markdown::redcarpetparser::withpygments","jekyll::converters::markdown::redcarpetparser::withrouge","jekyll::converters::markdown::redcarpetparser::withouthighlighting","jekyll::converters::textile","jekyll::convertible","jekyll::deprecator","jekyll::document","jekyll::draft","jekyll::entryfilter","jekyll::excerpt","jekyll::fatalexception","jekyll::filters","jekyll::generator","jekyll::generators","jekyll::generators::pagination","jekyll::gisttag","jekyll::layout","jekyll::layoutreader","jekyll::page","jekyll::pager","jekyll::plugin","jekyll::pluginmanager","jekyll::post","jekyll::publisher","jekyll::relatedposts","jekyll::renderer","jekyll::site","jekyll::site::cleaner","jekyll::staticfile","jekyll::stevenson","jekyll::tags","jekyll::tags::highlightblock","jekyll::tags::includetag","jekyll::tags::includetagerror","jekyll::tags::postcomparer","jekyll::tags::posturl","jekyll::url","jekyll::utils","liquid","object","safeyaml","jekyll::document#<=>()","jekyll::plugin::<=>()","jekyll::post#<=>()","jekyll::tags::postcomparer#==()","jekyll::convertible#[]()","jekyll::stevenson#abort_with()","jekyll::command::add_build_options()","jekyll::converters::markdown::redcarpetparser::commonmethods#add_code_tags()","jekyll::tags::highlightblock#add_code_tags()","jekyll::site#aggregate_post_info()","jekyll::converters::markdown#allowed_custom_class?()","jekyll::deprecator::arg_is_present?()","jekyll::filters#array_to_sentence_string()","jekyll::document#asset_file?()","jekyll::entryfilter#backup?()","jekyll::configuration#backwards_compatibilize()","jekyll::entryfilter#base_directory()","jekyll::document#basename()","jekyll::tags::includetag#blank?()","jekyll::converters::markdown::redcarpetparser::withpygments#block_code()","jekyll::converters::markdown::redcarpetparser::withrouge#block_code()","jekyll::converters::markdown::redcarpetparser::withouthighlighting#block_code()","jekyll::commands::build::build()","jekyll::relatedposts#build()","jekyll::relatedposts#build_index()","jekyll::pager::calculate_pages()","jekyll::publisher#can_be_published?()","jekyll::site#categories()","jekyll::filters#cgi_escape()","jekyll::document#cleaned_relative_path()","jekyll::site#cleanup()","jekyll::site::cleaner#cleanup!()","jekyll::converters::markdown::redcarpetparser::withouthighlighting#code_wrap()","jekyll::commands::doctor::collect_urls()","jekyll::configuration#config_files()","jekyll::configuration()","jekyll::command::configuration_from_options()","jekyll::commands::doctor::conflicting_urls()","jekyll::pluginmanager#conscientious_require()","jekyll::draft#containing_dir()","jekyll::post#containing_dir()","jekyll::converters::identity#convert()","jekyll::converters::markdown#convert()","jekyll::converters::markdown::kramdownparser#convert()","jekyll::converters::markdown::marukuparser#convert()","jekyll::converters::markdown::rdiscountparser#convert()","jekyll::converters::markdown::redcarpetparser#convert()","jekyll::converters::textile#convert()","jekyll::renderer#convert()","jekyll::convertible#converter()","jekyll::renderer#converters()","jekyll::commands::new::create_blank_site()","jekyll::commands::serve::create_error_page()","jekyll::commands::new::create_sample_files()","jekyll::configuration#csv_to_array()","jekyll::document#data()","jekyll::excerpt#data()","jekyll::filters#date_to_long_string()","jekyll::filters#date_to_rfc822()","jekyll::filters#date_to_string()","jekyll::filters#date_to_xmlschema()","jekyll::stevenson#debug()","jekyll::utils::deep_merge_hashes()","jekyll::commands::doctor::deprecated_relative_permalinks()","jekyll::deprecator::deprecation_message()","jekyll::entryfilter#derive_base_directory()","jekyll::document#destination()","jekyll::page#destination()","jekyll::post#destination()","jekyll::staticfile#destination()","jekyll::gisttag#determine_arguments()","jekyll::page#dir()","jekyll::post#dir()","jekyll::collection#directory()","jekyll::relatedposts#display()","jekyll::convertible#do_layout()","jekyll::collection#docs()","jekyll::site#documents()","jekyll::site#each_site_file()","jekyll::entryfilter#ensure_leading_slash()","jekyll::pager::ensure_leading_slash()","jekyll::site#ensure_not_in_dest()","jekyll::collection#entries()","jekyll::collection#entry_filter()","jekyll::stevenson#error()","jekyll::url::escape_path()","jekyll::post#excerpt()","jekyll::entryfilter#excluded?()","jekyll::site::cleaner#existing_files()","jekyll::collection#exists?()","jekyll::document#extname()","jekyll::excerpt#extract_excerpt()","jekyll::post#extract_excerpt()","jekyll::tags::includetag#file_read_opts()","jekyll::entryfilter#filter()","jekyll::site#filter_entries()","jekyll::collection#filtered_entries()","jekyll::generators::pagination::first_page_url()","jekyll::configuration#fix_common_issues()","jekyll::stevenson#formatted_topic()","jekyll::fs_root()","jekyll::generators::pagination#generate()","jekyll::site#generate()","jekyll::post#generate_excerpt?()","jekyll::url#generate_url()","jekyll::site#getconverterimpl()","jekyll::site#get_entries()","jekyll::gisttag#gist_script_tag()","jekyll::entryfilter#glob_include?()","jekyll::command::globs()","jekyll::filters#group_by()","jekyll::filters#groupable?()","jekyll::site#has_relative_page?()","jekyll::site#has_yaml_header?()","jekyll::commands::doctor::healthy?()","jekyll::publisher#hidden_in_the_future?()","jekyll::converter::highlighter_prefix()","jekyll::converter#highlighter_prefix()","jekyll::converter::highlighter_suffix()","jekyll::converter#highlighter_suffix()","jekyll::page#html?()","jekyll::excerpt#id()","jekyll::post#id()","jekyll::pager::in_hierarchy()","jekyll::excerpt#include?()","jekyll::entryfilter#included?()","jekyll::page#index?()","jekyll::stevenson#info()","jekyll::command::inherited()","jekyll::plugin::inherited()","jekyll::commands::build::init_with_program()","jekyll::commands::docs::init_with_program()","jekyll::commands::doctor::init_with_program()","jekyll::commands::new::init_with_program()","jekyll::commands::serve::init_with_program()","jekyll::commands::new::initialized_post_name()","jekyll::collection#inspect()","jekyll::document#inspect()","jekyll::excerpt#inspect()","jekyll::page#inspect()","jekyll::post#inspect()","jekyll::site#instantiate_subclasses()","jekyll::filters#item_property()","jekyll::filters#jsonify()","jekyll::site::cleaner#keep_file_regex()","jekyll::layoutreader#layout_directory()","jekyll::layoutreader#layout_directory_in_cwd()","jekyll::layoutreader#layout_directory_inside_source()","jekyll::layoutreader#layout_entries()","jekyll::layoutreader#layout_name()","jekyll::site#limit_posts!()","jekyll::converters::markdown::marukuparser#load_blahtext_library()","jekyll::converters::markdown::marukuparser#load_divs_library()","jekyll::logger()","jekyll::relatedposts#lsi_related_posts()","jekyll::filters#markdownify()","jekyll::converters::identity#matches()","jekyll::converters::markdown#matches()","jekyll::converters::textile#matches()","jekyll::convertible#merged_file_read_opts()","jekyll::document#merged_file_read_opts()","jekyll::stevenson#message()","jekyll::commands::serve::mime_types()","jekyll::staticfile#modified?()","jekyll::relatedposts#most_recent_posts()","jekyll::staticfile#mtime()","jekyll::collection::new()","jekyll::converter::new()","jekyll::converters::markdown::kramdownparser::new()","jekyll::converters::markdown::marukuparser::new()","jekyll::converters::markdown::rdiscountparser::new()","jekyll::converters::markdown::redcarpetparser::new()","jekyll::document::new()","jekyll::entryfilter::new()","jekyll::excerpt::new()","jekyll::layout::new()","jekyll::layoutreader::new()","jekyll::page::new()","jekyll::pager::new()","jekyll::plugin::new()","jekyll::pluginmanager::new()","jekyll::post::new()","jekyll::publisher::new()","jekyll::relatedposts::new()","jekyll::renderer::new()","jekyll::site::new()","jekyll::site::cleaner::new()","jekyll::staticfile::new()","jekyll::stevenson::new()","jekyll::tags::highlightblock::new()","jekyll::tags::includetag::new()","jekyll::tags::includetagerror::new()","jekyll::tags::postcomparer::new()","jekyll::tags::posturl::new()","jekyll::url::new()","jekyll::site::cleaner#new_dirs()","jekyll::site::cleaner#new_files()","jekyll::post#next()","jekyll::deprecator::no_subcommand()","jekyll::filters#number_of_words()","jekyll::site::cleaner#obsolete_files()","jekyll::converters::identity#output_ext()","jekyll::converters::markdown#output_ext()","jekyll::converters::textile#output_ext()","jekyll::convertible#output_ext()","jekyll::renderer#output_ext()","jekyll::generators::pagination#paginate()","jekyll::pager::paginate_path()","jekyll::pager::pagination_candidate?()","jekyll::pager::pagination_enabled?()","jekyll::tags::includetag#parse_params()","jekyll::excerpt#path()","jekyll::page#path()","jekyll::post#path()","jekyll::staticfile#path()","jekyll::tags::includetag#path_relative_to_source()","jekyll::document#permalink()","jekyll::page#permalink()","jekyll::post#permalink()","jekyll::renderer#place_in_layouts()","jekyll::pluginmanager#plugin_allowed?()","jekyll::pluginmanager#plugins_path()","jekyll::utils::pluralized_array_from_hash()","jekyll::post#populate_categories()","jekyll::post#populate_tags()","jekyll::site#post_attr_hash()","jekyll::tags::postcomparer#post_slug()","jekyll::commands::new::preserve_source_location?()","jekyll::post#previous()","jekyll::converters::markdown::marukuparser#print_errors_and_fail()","jekyll::plugin::priority()","jekyll::commands::build::process()","jekyll::commands::doctor::process()","jekyll::commands::new::process()","jekyll::commands::serve::process()","jekyll::deprecator::process()","jekyll::draft#process()","jekyll::layout#process()","jekyll::page#process()","jekyll::post#process()","jekyll::site#process()","jekyll::command::process_site()","jekyll::publisher#publish?()","jekyll::convertible#published?()","jekyll::document#published?()","jekyll::site#publisher()","jekyll::collection#read()","jekyll::document#read()","jekyll::layoutreader#read()","jekyll::site#read()","jekyll::site#read_collections()","jekyll::configuration#read_config_file()","jekyll::configuration#read_config_files()","jekyll::site#read_content()","jekyll::site#read_data()","jekyll::site#read_directories()","jekyll::site#read_drafts()","jekyll::site#read_posts()","jekyll::convertible#read_yaml()","jekyll::post#read_yaml()","jekyll::tags::includetag#realpath_prefixed_with?()","jekyll::post#related_posts()","jekyll::collection#relative_directory()","jekyll::document#relative_path()","jekyll::draft#relative_path()","jekyll::page#relative_path()","jekyll::post#relative_path()","jekyll::staticfile#relative_path()","jekyll::site#relative_permalinks_deprecation_method()","jekyll::entryfilter#relative_to_source()","jekyll::pager::remove_leading_slash()","jekyll::gisttag#render()","jekyll::page#render()","jekyll::post#render()","jekyll::site#render()","jekyll::tags::highlightblock#render()","jekyll::tags::includetag#render()","jekyll::tags::posturl#render()","jekyll::convertible#render_all_layouts()","jekyll::tags::highlightblock#render_codehighlighter()","jekyll::convertible#render_liquid()","jekyll::renderer#render_liquid()","jekyll::tags::highlightblock#render_pygments()","jekyll::tags::highlightblock#render_rouge()","jekyll::tags::includetag#render_variable()","jekyll::document#render_with_liquid?()","jekyll::converters::markdown::rdiscountparser#replace_generated_toc()","jekyll::site::cleaner#replaced_files()","object#require_all()","jekyll::pluginmanager#require_gems()","jekyll::pluginmanager#require_plugin_files()","jekyll::site#reset()","jekyll::staticfile::reset_cache()","jekyll::converters::markdown::redcarpetparser::withrouge#rouge_formatter()","jekyll::renderer#run()","jekyll::plugin::safe()","jekyll::configuration#safe_load_file()","jekyll::site#sanitize_filename()","jekyll::collection#sanitize_label()","jekyll::url#sanitize_url()","jekyll::sanitized_path()","jekyll::commands::new::scaffold_path()","jekyll::commands::new::scaffold_post_content()","jekyll::set_timezone()","jekyll::converters::markdown#setup()","jekyll::converters::textile#setup()","jekyll::site#setup()","jekyll::site#site_cleaner()","jekyll::site#site_data()","jekyll::site#site_payload()","jekyll::commands::new::site_template()","jekyll::configuration#source()","jekyll::tags::includetag#source()","jekyll::entryfilter#special?()","jekyll::commands::serve::start_callback()","jekyll::utils::stringify_hash_keys()","jekyll::configuration#stringify_keys()","jekyll::command::subclasses()","jekyll::plugin::subclasses()","jekyll::utils::symbolize_hash_keys()","jekyll::entryfilter#symlink?()","jekyll::site#tags()","jekyll::page#template()","jekyll::post#template()","jekyll::generators::pagination#template_page()","jekyll::filters#textilize()","jekyll::filters#time()","jekyll::post#title()","jekyll::post#titleized_slug()","jekyll::collection#to_liquid()","jekyll::convertible#to_liquid()","jekyll::document#to_liquid()","jekyll::excerpt#to_liquid()","jekyll::pager#to_liquid()","jekyll::staticfile#to_liquid()","jekyll::site#to_render()","jekyll::convertible#to_s()","jekyll::document#to_s()","jekyll::excerpt#to_s()","jekyll::url#to_s()","jekyll::convertible#transform()","jekyll::url::unescape_path()","jekyll::filters#uri_escape()","jekyll::document#url()","jekyll::page#url()","jekyll::post#url()","jekyll::document#url_placeholders()","jekyll::page#url_placeholders()","jekyll::post#url_placeholders()","jekyll::document#url_template()","jekyll::page#uses_relative_permalinks()","jekyll::draft::valid?()","jekyll::post::valid?()","jekyll::tags::includetag#validate_file_name()","jekyll::tags::includetag#validate_params()","jekyll::tags::includetag#validate_path()","jekyll::stevenson#warn()","jekyll::commands::build::watch()","jekyll::commands::serve::webrick_options()","jekyll::filters#where()","jekyll::pluginmanager#whitelist()","jekyll::layoutreader#within()","jekyll::convertible#write()","jekyll::document#write()","jekyll::site#write()","jekyll::staticfile#write()","jekyll::filters#xml_escape()","jekyll::document#yaml_file?()","","","","","","","","","","","","","",""],"info":[["Jekyll","","Jekyll.html","","<p>Convertible provides methods for converting a pagelike item from a certain\ntype of markup into actual …\n"],["Jekyll::Collection","","Jekyll/Collection.html","",""],["Jekyll::Command","","Jekyll/Command.html","",""],["Jekyll::Commands","","Jekyll/Commands.html","",""],["Jekyll::Commands::Build","","Jekyll/Commands/Build.html","",""],["Jekyll::Commands::Docs","","Jekyll/Commands/Docs.html","",""],["Jekyll::Commands::Doctor","","Jekyll/Commands/Doctor.html","",""],["Jekyll::Commands::New","","Jekyll/Commands/New.html","",""],["Jekyll::Commands::Serve","","Jekyll/Commands/Serve.html","",""],["Jekyll::Configuration","","Jekyll/Configuration.html","",""],["Jekyll::Converter","","Jekyll/Converter.html","",""],["Jekyll::Converters","","Jekyll/Converters.html","",""],["Jekyll::Converters::Identity","","Jekyll/Converters/Identity.html","",""],["Jekyll::Converters::Markdown","","Jekyll/Converters/Markdown.html","",""],["Jekyll::Converters::Markdown::KramdownParser","","Jekyll/Converters/Markdown/KramdownParser.html","",""],["Jekyll::Converters::Markdown::MarukuParser","","Jekyll/Converters/Markdown/MarukuParser.html","",""],["Jekyll::Converters::Markdown::RDiscountParser","","Jekyll/Converters/Markdown/RDiscountParser.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser","","Jekyll/Converters/Markdown/RedcarpetParser.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::CommonMethods","","Jekyll/Converters/Markdown/RedcarpetParser/CommonMethods.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::WithPygments","","Jekyll/Converters/Markdown/RedcarpetParser/WithPygments.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::WithRouge","","Jekyll/Converters/Markdown/RedcarpetParser/WithRouge.html","",""],["Jekyll::Converters::Markdown::RedcarpetParser::WithoutHighlighting","","Jekyll/Converters/Markdown/RedcarpetParser/WithoutHighlighting.html","",""],["Jekyll::Converters::Textile","","Jekyll/Converters/Textile.html","",""],["Jekyll::Convertible","","Jekyll/Convertible.html","",""],["Jekyll::Deprecator","","Jekyll/Deprecator.html","",""],["Jekyll::Document","","Jekyll/Document.html","",""],["Jekyll::Draft","","Jekyll/Draft.html","",""],["Jekyll::EntryFilter","","Jekyll/EntryFilter.html","",""],["Jekyll::Excerpt","","Jekyll/Excerpt.html","",""],["Jekyll::FatalException","","Jekyll/FatalException.html","",""],["Jekyll::Filters","","Jekyll/Filters.html","",""],["Jekyll::Generator","","Jekyll/Generator.html","",""],["Jekyll::Generators","","Jekyll/Generators.html","",""],["Jekyll::Generators::Pagination","","Jekyll/Generators/Pagination.html","",""],["Jekyll::GistTag","","Jekyll/GistTag.html","",""],["Jekyll::Layout","","Jekyll/Layout.html","",""],["Jekyll::LayoutReader","","Jekyll/LayoutReader.html","",""],["Jekyll::Page","","Jekyll/Page.html","",""],["Jekyll::Pager","","Jekyll/Pager.html","",""],["Jekyll::Plugin","","Jekyll/Plugin.html","",""],["Jekyll::PluginManager","","Jekyll/PluginManager.html","",""],["Jekyll::Post","","Jekyll/Post.html","",""],["Jekyll::Publisher","","Jekyll/Publisher.html","",""],["Jekyll::RelatedPosts","","Jekyll/RelatedPosts.html","",""],["Jekyll::Renderer","","Jekyll/Renderer.html","",""],["Jekyll::Site","","Jekyll/Site.html","",""],["Jekyll::Site::Cleaner","","Jekyll/Site/Cleaner.html","","<p>Handles the cleanup of a site&#39;s destination before it is built.\n"],["Jekyll::StaticFile","","Jekyll/StaticFile.html","",""],["Jekyll::Stevenson","","Jekyll/Stevenson.html","",""],["Jekyll::Tags","","Jekyll/Tags.html","",""],["Jekyll::Tags::HighlightBlock","","Jekyll/Tags/HighlightBlock.html","",""],["Jekyll::Tags::IncludeTag","","Jekyll/Tags/IncludeTag.html","",""],["Jekyll::Tags::IncludeTagError","","Jekyll/Tags/IncludeTagError.html","",""],["Jekyll::Tags::PostComparer","","Jekyll/Tags/PostComparer.html","",""],["Jekyll::Tags::PostUrl","","Jekyll/Tags/PostUrl.html","",""],["Jekyll::URL","","Jekyll/URL.html","",""],["Jekyll::Utils","","Jekyll/Utils.html","",""],["Liquid","","Liquid.html","",""],["Object","","Object.html","",""],["SafeYAML","","SafeYAML.html","",""],["<=>","Jekyll::Document","Jekyll/Document.html#method-i-3C-3D-3E","(anotherDocument)","<p>Compare this document against another document. Comparison is a comparison\nbetween the 2 paths of the …\n"],["<=>","Jekyll::Plugin","Jekyll/Plugin.html#method-c-3C-3D-3E","(other)","<p>Spaceship is priority [higher -&gt; lower]\n<p>other - The class to be compared.\n<p>Returns -1, 0, 1.\n"],["<=>","Jekyll::Post","Jekyll/Post.html#method-i-3C-3D-3E","(other)","<p>Compares Post objects. First compares the Post date. If the dates are\nequal, it compares the Post slugs. …\n"],["==","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-3D-3D","(other)",""],["[]","Jekyll::Convertible","Jekyll/Convertible.html#method-i-5B-5D","(property)","<p>Accessor for data properties by Liquid.\n<p>property - The String name of the property to retrieve.\n<p>Returns …\n"],["abort_with","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-abort_with","(topic, message = nil)","<p>Public: Print a Jekyll error message to stderr and immediately abort the\nprocess\n<p>topic - the topic of …\n"],["add_build_options","Jekyll::Command","Jekyll/Command.html#method-c-add_build_options","(c)","<p>Add common options to a command for building configuration\n<p>c - the Jekyll::Command to add these options …\n"],["add_code_tags","Jekyll::Converters::Markdown::RedcarpetParser::CommonMethods","Jekyll/Converters/Markdown/RedcarpetParser/CommonMethods.html#method-i-add_code_tags","(code, lang)",""],["add_code_tags","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-add_code_tags","(code, lang)",""],["aggregate_post_info","Jekyll::Site","Jekyll/Site.html#method-i-aggregate_post_info","(post)","<p>Aggregate post information\n<p>post - The Post object to aggregate information for\n<p>Returns nothing\n"],["allowed_custom_class?","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-allowed_custom_class-3F","(parser_name)","<p>Private: Determine whether a class name is an allowed custom markdown class\nname\n<p>parser_name - the name …\n"],["arg_is_present?","Jekyll::Deprecator","Jekyll/Deprecator.html#method-c-arg_is_present-3F","(args, deprecated_argument, message)",""],["array_to_sentence_string","Jekyll::Filters","Jekyll/Filters.html#method-i-array_to_sentence_string","(array)","<p>Join an array of things into a string by separating with commas and the\nword “and” for the …\n"],["asset_file?","Jekyll::Document","Jekyll/Document.html#method-i-asset_file-3F","()","<p>Determine whether the document is an asset file. Asset files include\nCoffeeScript files and Sass/SCSS …\n"],["backup?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-backup-3F","(entry)",""],["backwards_compatibilize","Jekyll::Configuration","Jekyll/Configuration.html#method-i-backwards_compatibilize","()","<p>Public: Ensure the proper options are set in the configuration to allow for\nbackwards-compatibility with …\n"],["base_directory","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-base_directory","()",""],["basename","Jekyll::Document","Jekyll/Document.html#method-i-basename","(suffix = \"\")","<p>The base filename of the document.\n<p>suffix - (optional) the suffix to be removed from the end of the filename …\n"],["blank?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-blank-3F","()",""],["block_code","Jekyll::Converters::Markdown::RedcarpetParser::WithPygments","Jekyll/Converters/Markdown/RedcarpetParser/WithPygments.html#method-i-block_code","(code, lang)",""],["block_code","Jekyll::Converters::Markdown::RedcarpetParser::WithRouge","Jekyll/Converters/Markdown/RedcarpetParser/WithRouge.html#method-i-block_code","(code, lang)",""],["block_code","Jekyll::Converters::Markdown::RedcarpetParser::WithoutHighlighting","Jekyll/Converters/Markdown/RedcarpetParser/WithoutHighlighting.html#method-i-block_code","(code, lang)",""],["build","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-build","(site, options)","<p>Build your Jekyll site.\n<p>site - the Jekyll::Site instance to build options - the\n<p>Returns nothing.\n"],["build","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-build","()",""],["build_index","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-build_index","()",""],["calculate_pages","Jekyll::Pager","Jekyll/Pager.html#method-c-calculate_pages","(all_posts, per_page)","<p>Calculate the number of pages.\n<p>all_posts - The Array of all Posts. per_page  - The Integer of entries …\n"],["can_be_published?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-can_be_published-3F","(thing)",""],["categories","Jekyll::Site","Jekyll/Site.html#method-i-categories","()",""],["cgi_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-cgi_escape","(input)","<p>CGI escape a string for use in a URL. Replaces any special characters with\nappropriate %XX replacements. …\n"],["cleaned_relative_path","Jekyll::Document","Jekyll/Document.html#method-i-cleaned_relative_path","()","<p>Produces a “cleaned” relative path. The “cleaned” relative path is the\nrelative path …\n"],["cleanup","Jekyll::Site","Jekyll/Site.html#method-i-cleanup","()","<p>Remove orphaned files and empty directories in destination.\n<p>Returns nothing.\n"],["cleanup!","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-cleanup-21","()","<p>Cleans up the site&#39;s destination directory\n"],["code_wrap","Jekyll::Converters::Markdown::RedcarpetParser::WithoutHighlighting","Jekyll/Converters/Markdown/RedcarpetParser/WithoutHighlighting.html#method-i-code_wrap","(code)",""],["collect_urls","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-collect_urls","(urls, things, destination)",""],["config_files","Jekyll::Configuration","Jekyll/Configuration.html#method-i-config_files","(override)","<p>Public: Generate list of configuration files from the override\n<p>override - the command-line options hash …\n"],["configuration","Jekyll","Jekyll.html#method-c-configuration","(override)","<p>Public: Generate a Jekyll configuration Hash by merging the default options\nwith anything in _config.yml …\n"],["configuration_from_options","Jekyll::Command","Jekyll/Command.html#method-c-configuration_from_options","(options)","<p>Create a full Jekyll configuration with the options passed in as overrides\n<p>options - the configuration …\n"],["conflicting_urls","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-conflicting_urls","(site)",""],["conscientious_require","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-conscientious_require","()","<p>Require all the plugins which are allowed.\n<p>Returns nothing\n"],["containing_dir","Jekyll::Draft","Jekyll/Draft.html#method-i-containing_dir","(source, dir)","<p>Get the full path to the directory containing the draft files\n"],["containing_dir","Jekyll::Post","Jekyll/Post.html#method-i-containing_dir","(source, dir)","<p>Get the full path to the directory containing the post files\n"],["convert","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::MarukuParser","Jekyll/Converters/Markdown/MarukuParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::RDiscountParser","Jekyll/Converters/Markdown/RDiscountParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Markdown::RedcarpetParser","Jekyll/Converters/Markdown/RedcarpetParser.html#method-i-convert","(content)",""],["convert","Jekyll::Converters::Textile","Jekyll/Converters/Textile.html#method-i-convert","(content)",""],["convert","Jekyll::Renderer","Jekyll/Renderer.html#method-i-convert","(content)","<p>Convert the given content using the converters which match this\nrenderer&#39;s document.\n<p>content - the …\n"],["converter","Jekyll::Convertible","Jekyll/Convertible.html#method-i-converter","()","<p>Determine which converter to use based on this convertible&#39;s extension.\n<p>Returns the Converter instance. …\n"],["converters","Jekyll::Renderer","Jekyll/Renderer.html#method-i-converters","()","<p>Determine which converters to use based on this document&#39;s extension.\n<p>Returns an array of Converter …\n"],["create_blank_site","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-create_blank_site","(path)",""],["create_error_page","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-create_error_page","()",""],["create_sample_files","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-create_sample_files","(path)",""],["csv_to_array","Jekyll::Configuration","Jekyll/Configuration.html#method-i-csv_to_array","(csv)","<p>Public: Split a CSV string into an array containing its values\n<p>csv - the string of comma-separated values …\n"],["data","Jekyll::Document","Jekyll/Document.html#method-i-data","()","<p>Fetch the Document&#39;s data.\n<p>Returns a Hash containing the data. An empty hash is returned if\n\n<pre>no data ...</pre>\n"],["data","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-data","()","<p>Fetch YAML front-matter data from related post, without layout key\n<p>Returns Hash of post data\n"],["date_to_long_string","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_long_string","(date)","<p>Format a date in long format e.g. “27 January 2011”.\n<p>date - The Time to format.\n<p>Returns the formatted …\n"],["date_to_rfc822","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_rfc822","(date)","<p>Format a date according to RFC-822\n<p>date - The Time to format.\n<p>Examples\n"],["date_to_string","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_string","(date)","<p>Format a date in short format e.g. “27 Jan 2011”.\n<p>date - the Time to format.\n<p>Returns the formatting …\n"],["date_to_xmlschema","Jekyll::Filters","Jekyll/Filters.html#method-i-date_to_xmlschema","(date)","<p>Format a date for use in XML.\n<p>date - The Time to format.\n<p>Examples\n"],["debug","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-debug","(topic, message = nil)","<p>Public: Print a jekyll debug message to stdout\n<p>topic - the topic of the message, e.g. “Configuration …\n"],["deep_merge_hashes","Jekyll::Utils","Jekyll/Utils.html#method-c-deep_merge_hashes","(master_hash, other_hash)","<p>Merges a master hash with another hash, recursively.\n<p>master_hash - the “parent” hash whose values …\n"],["deprecated_relative_permalinks","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-deprecated_relative_permalinks","(site)",""],["deprecation_message","Jekyll::Deprecator","Jekyll/Deprecator.html#method-c-deprecation_message","(message)",""],["derive_base_directory","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-derive_base_directory","(site, base_dir)",""],["destination","Jekyll::Document","Jekyll/Document.html#method-i-destination","(base_directory)","<p>The full path to the output file.\n<p>base_directory - the base path of the output directory\n<p>Returns the full …\n"],["destination","Jekyll::Page","Jekyll/Page.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns the destination file path …\n"],["destination","Jekyll::Post","Jekyll/Post.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns destination file path  …\n"],["destination","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-destination","(dest)","<p>Obtain destination path.\n<p>dest - The String path to the destination dir.\n<p>Returns destination file path. …\n"],["determine_arguments","Jekyll::GistTag","Jekyll/GistTag.html#method-i-determine_arguments","(input)",""],["dir","Jekyll::Page","Jekyll/Page.html#method-i-dir","()","<p>The generated directory into which the page will be placed upon generation.\nThis is derived from the …\n"],["dir","Jekyll::Post","Jekyll/Post.html#method-i-dir","()","<p>The generated directory into which the post will be placed upon generation.\nThis is derived from the …\n"],["directory","Jekyll::Collection","Jekyll/Collection.html#method-i-directory","()","<p>The full path to the directory containing the\n<p>Returns a String containing th directory name where the …\n"],["display","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-display","(output)",""],["do_layout","Jekyll::Convertible","Jekyll/Convertible.html#method-i-do_layout","(payload, layouts)","<p>Add any necessary layouts to this convertible document.\n<p>payload - The site payload Hash. layouts - A  …\n"],["docs","Jekyll::Collection","Jekyll/Collection.html#method-i-docs","()","<p>Fetch the Documents in this collection. Defaults to an empty array if no\ndocuments have been read in. …\n"],["documents","Jekyll::Site","Jekyll/Site.html#method-i-documents","()",""],["each_site_file","Jekyll::Site","Jekyll/Site.html#method-i-each_site_file","()",""],["ensure_leading_slash","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-ensure_leading_slash","(path)",""],["ensure_leading_slash","Jekyll::Pager","Jekyll/Pager.html#method-c-ensure_leading_slash","(path)","<p>Static: Return a String version of the input which has a leading slash.\n\n<pre>If the input already has a forward ...</pre>\n"],["ensure_not_in_dest","Jekyll::Site","Jekyll/Site.html#method-i-ensure_not_in_dest","()","<p>Check that the destination dir isn&#39;t the source dir or a directory\nparent to the source dir.\n"],["entries","Jekyll::Collection","Jekyll/Collection.html#method-i-entries","()","<p>All the entries in this collection.\n<p>Returns an Array of file paths to the documents in this collection …\n"],["entry_filter","Jekyll::Collection","Jekyll/Collection.html#method-i-entry_filter","()","<p>The entry filter for this collection. Creates an instance of\nJekyll::EntryFilter.\n<p>Returns the instance …\n"],["error","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-error","(topic, message = nil)","<p>Public: Print a jekyll error message to stderr\n<p>topic - the topic of the message, e.g. “Configuration …\n"],["escape_path","Jekyll::URL","Jekyll/URL.html#method-c-escape_path","(path)","<p>Escapes a path to be a valid URL path segment\n<p>path - The path to be escaped.\n<p>Examples:\n"],["excerpt","Jekyll::Post","Jekyll/Post.html#method-i-excerpt","()","<p>The post excerpt. This is either a custom excerpt set in YAML front matter\nor the result of extract_excerpt. …\n"],["excluded?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-excluded-3F","(entry)",""],["existing_files","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-existing_files","()","<p>Private: The list of existing files, apart from those included in\nkeep_files and hidden files.\n<p>Returns …\n"],["exists?","Jekyll::Collection","Jekyll/Collection.html#method-i-exists-3F","()","<p>Checks whether the directory “exists” for this collection. The directory\nmust exist on the …\n"],["extname","Jekyll::Document","Jekyll/Document.html#method-i-extname","()","<p>The extension name of the document.\n<p>Returns the extension name of the document.\n"],["extract_excerpt","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-extract_excerpt","(post_content)","<p>Internal: Extract excerpt from the content\n<p>By default excerpt is your first paragraph of a post: everything …\n"],["extract_excerpt","Jekyll::Post","Jekyll/Post.html#method-i-extract_excerpt","()",""],["file_read_opts","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-file_read_opts","(context)","<p>Grab file read opts in the context\n"],["filter","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-filter","(entries)",""],["filter_entries","Jekyll::Site","Jekyll/Site.html#method-i-filter_entries","(entries, base_directory = nil)","<p>Filter out any files/directories that are hidden or backup files (start\nwith “.” or “#” …\n"],["filtered_entries","Jekyll::Collection","Jekyll/Collection.html#method-i-filtered_entries","()","<p>Filtered version of the entries in this collection. See\n`Jekyll::EntryFilter#filter` for more information. …\n"],["first_page_url","Jekyll::Generators::Pagination","Jekyll/Generators/Pagination.html#method-c-first_page_url","(site)","<p>Static: Fetch the URL of the template page. Used to determine the\n\n<pre>path to the first pager in the series.</pre>\n"],["fix_common_issues","Jekyll::Configuration","Jekyll/Configuration.html#method-i-fix_common_issues","()",""],["formatted_topic","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-formatted_topic","(topic)","<p>Public: Format the topic\n<p>topic - the topic of the message, e.g. “Configuration file”, “Deprecation”,\n…\n"],["fs_root","Jekyll","Jekyll.html#method-c-fs_root","()","<p>Public: File system root\n<p>Returns the root of the filesystem as a Pathname\n"],["generate","Jekyll::Generators::Pagination","Jekyll/Generators/Pagination.html#method-i-generate","(site)","<p>Generate paginated pages if necessary.\n<p>site - The Site.\n<p>Returns nothing.\n"],["generate","Jekyll::Site","Jekyll/Site.html#method-i-generate","()","<p>Run each of the Generators.\n<p>Returns nothing.\n"],["generate_excerpt?","Jekyll::Post","Jekyll/Post.html#method-i-generate_excerpt-3F","()",""],["generate_url","Jekyll::URL","Jekyll/URL.html#method-i-generate_url","()","<p>Internal: Generate the URL by replacing all placeholders with their\nrespective values\n<p>Returns the <em>unsanitizied</em> …\n"],["getConverterImpl","Jekyll::Site","Jekyll/Site.html#method-i-getConverterImpl","(klass)","<p>Get the implementation class for the given Converter.\n<p>klass - The Class of the Converter to fetch.\n<p>Returns …\n"],["get_entries","Jekyll::Site","Jekyll/Site.html#method-i-get_entries","(dir, subfolder)","<p>Read the entries from a particular directory for processing\n<p>dir - The String relative path of the directory …\n"],["gist_script_tag","Jekyll::GistTag","Jekyll/GistTag.html#method-i-gist_script_tag","(gist_id, filename = nil)",""],["glob_include?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-glob_include-3F","(enum, e)","<p>Returns true if path matches against any glob pattern. Look for more detail\nabout glob pattern in method …\n"],["globs","Jekyll::Command","Jekyll/Command.html#method-c-globs","(source, destination)","<p>Listing of all directories (globbed to include subfiles and folders)\n<p>source - the source path destination …\n"],["group_by","Jekyll::Filters","Jekyll/Filters.html#method-i-group_by","(input, property)","<p>Group an array of items by a property\n<p>input - the inputted Enumerable property - the property\n<p>Returns an …\n"],["groupable?","Jekyll::Filters","Jekyll/Filters.html#method-i-groupable-3F","(element)",""],["has_relative_page?","Jekyll::Site","Jekyll/Site.html#method-i-has_relative_page-3F","()",""],["has_yaml_header?","Jekyll::Site","Jekyll/Site.html#method-i-has_yaml_header-3F","(file)",""],["healthy?","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-healthy-3F","(site)",""],["hidden_in_the_future?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-hidden_in_the_future-3F","(thing)",""],["highlighter_prefix","Jekyll::Converter","Jekyll/Converter.html#method-c-highlighter_prefix","(highlighter_prefix = nil)","<p>Public: Get or set the highlighter prefix. When an argument is specified,\nthe prefix will be set. If …\n"],["highlighter_prefix","Jekyll::Converter","Jekyll/Converter.html#method-i-highlighter_prefix","()","<p>Get the highlighter prefix.\n<p>Returns the String prefix.\n"],["highlighter_suffix","Jekyll::Converter","Jekyll/Converter.html#method-c-highlighter_suffix","(highlighter_suffix = nil)","<p>Public: Get or set the highlighter suffix. When an argument is specified,\nthe suffix will be set. If …\n"],["highlighter_suffix","Jekyll::Converter","Jekyll/Converter.html#method-i-highlighter_suffix","()","<p>Get the highlighter suffix.\n<p>Returns the String suffix.\n"],["html?","Jekyll::Page","Jekyll/Page.html#method-i-html-3F","()","<p>Returns the Boolean of whether this Page is HTML or not.\n"],["id","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-id","()","<p>The UID for this post (useful in feeds). e.g. /2008/11/05/my-awesome-post\n<p>Returns the String UID.\n"],["id","Jekyll::Post","Jekyll/Post.html#method-i-id","()","<p>The UID for this post (useful in feeds). e.g. /2008/11/05/my-awesome-post\n<p>Returns the String UID.\n"],["in_hierarchy","Jekyll::Pager","Jekyll/Pager.html#method-c-in_hierarchy","(source, page_dir, paginate_path)","<p>Determine if the subdirectories of the two paths are the same relative to\nsource\n<p>source        - the site …\n"],["include?","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-include-3F","(something)","<p>Check if excerpt includes a string\n<p>Returns true if the string passed in\n"],["included?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-included-3F","(entry)",""],["index?","Jekyll::Page","Jekyll/Page.html#method-i-index-3F","()","<p>Returns the Boolean of whether this Page is an index file or not.\n"],["info","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-info","(topic, message = nil)","<p>Public: Print a jekyll message to stdout\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["inherited","Jekyll::Command","Jekyll/Command.html#method-c-inherited","(base)","<p>Keep a list of subclasses of Jekyll::Command every time it&#39;s inherited\nCalled automatically.\n<p>base …\n"],["inherited","Jekyll::Plugin","Jekyll/Plugin.html#method-c-inherited","(base)","<p>Install a hook so that subclasses are recorded. This method is only ever\ncalled by Ruby itself.\n<p>base - …\n"],["init_with_program","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-init_with_program","(prog)","<p>Create the Mercenary command for the Jekyll CLI for this Command\n"],["init_with_program","Jekyll::Commands::Docs","Jekyll/Commands/Docs.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-init_with_program","(prog)",""],["init_with_program","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-init_with_program","(prog)",""],["initialized_post_name","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-initialized_post_name","()","<p>Internal: Gets the filename of the sample post to be created\n<p>Returns the filename of the sample post, …\n"],["inspect","Jekyll::Collection","Jekyll/Collection.html#method-i-inspect","()","<p>An inspect string.\n<p>Returns the inspect string\n"],["inspect","Jekyll::Document","Jekyll/Document.html#method-i-inspect","()","<p>The inspect string for this document. Includes the relative path and the\ncollection label.\n<p>Returns the …\n"],["inspect","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-inspect","()","<p>Returns the shorthand String identifier of this Post.\n"],["inspect","Jekyll::Page","Jekyll/Page.html#method-i-inspect","()","<p>Returns the object as a debug String.\n"],["inspect","Jekyll::Post","Jekyll/Post.html#method-i-inspect","()","<p>Returns the shorthand String identifier of this Post.\n"],["instantiate_subclasses","Jekyll::Site","Jekyll/Site.html#method-i-instantiate_subclasses","(klass)","<p>Create array of instances of the subclasses of the class or module\n\n<pre>passed in as argument.</pre>\n<p>klass - class …\n"],["item_property","Jekyll::Filters","Jekyll/Filters.html#method-i-item_property","(item, property)",""],["jsonify","Jekyll::Filters","Jekyll/Filters.html#method-i-jsonify","(input)","<p>Convert the input into json string\n<p>input - The Array or Hash to be converted\n<p>Returns the converted json …\n"],["keep_file_regex","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-keep_file_regex","()","<p>Private: Creates a regular expression from the config&#39;s keep_files\narray\n<p>Examples\n\n<pre>[&#39;.git&#39;,&#39;.svn&#39;] creates ...</pre>\n"],["layout_directory","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory","()",""],["layout_directory_in_cwd","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory_in_cwd","()",""],["layout_directory_inside_source","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_directory_inside_source","()",""],["layout_entries","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_entries","()",""],["layout_name","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-layout_name","(file)",""],["limit_posts!","Jekyll::Site","Jekyll/Site.html#method-i-limit_posts-21","()",""],["load_blahtext_library","Jekyll::Converters::Markdown::MarukuParser","Jekyll/Converters/Markdown/MarukuParser.html#method-i-load_blahtext_library","()",""],["load_divs_library","Jekyll::Converters::Markdown::MarukuParser","Jekyll/Converters/Markdown/MarukuParser.html#method-i-load_divs_library","()",""],["logger","Jekyll","Jekyll.html#method-c-logger","()",""],["lsi_related_posts","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-lsi_related_posts","()",""],["markdownify","Jekyll::Filters","Jekyll/Filters.html#method-i-markdownify","(input)","<p>Convert a Markdown string into HTML output.\n<p>input - The Markdown String to convert.\n<p>Returns the HTML formatted …\n"],["matches","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-matches","(ext)",""],["matches","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-matches","(ext)",""],["matches","Jekyll::Converters::Textile","Jekyll/Converters/Textile.html#method-i-matches","(ext)",""],["merged_file_read_opts","Jekyll::Convertible","Jekyll/Convertible.html#method-i-merged_file_read_opts","(opts)","<p>Returns merged option hash for File.read of self.site (if exists) and a\ngiven param\n"],["merged_file_read_opts","Jekyll::Document","Jekyll/Document.html#method-i-merged_file_read_opts","(opts)","<p>Returns merged option hash for File.read of self.site (if exists) and a\ngiven param\n<p>opts - override options …\n"],["message","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-message","(topic, message)","<p>Public: Build a Jekyll topic method\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["mime_types","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-mime_types","()",""],["modified?","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-modified-3F","()","<p>Is source path modified?\n<p>Returns true if modified since last write.\n"],["most_recent_posts","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-i-most_recent_posts","()",""],["mtime","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-mtime","()","<p>Returns last modification time for this file.\n"],["new","Jekyll::Collection","Jekyll/Collection.html#method-c-new","(site, label)","<p>Create a new Collection.\n<p>site - the site to which this collection belongs. label - the name of the\ncollection …\n"],["new","Jekyll::Converter","Jekyll/Converter.html#method-c-new","(config = {})","<p>Initialize the converter.\n<p>Returns an initialized Converter.\n"],["new","Jekyll::Converters::Markdown::KramdownParser","Jekyll/Converters/Markdown/KramdownParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::Markdown::MarukuParser","Jekyll/Converters/Markdown/MarukuParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::Markdown::RDiscountParser","Jekyll/Converters/Markdown/RDiscountParser.html#method-c-new","(config)",""],["new","Jekyll::Converters::Markdown::RedcarpetParser","Jekyll/Converters/Markdown/RedcarpetParser.html#method-c-new","(config)",""],["new","Jekyll::Document","Jekyll/Document.html#method-c-new","(path, relations)","<p>Create a new Document.\n<p>site - the Jekyll::Site instance to which this Document belongs path - the\npath …\n"],["new","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-c-new","(site, base_directory = nil)",""],["new","Jekyll::Excerpt","Jekyll/Excerpt.html#method-c-new","(post)","<p>Initialize this Post instance.\n<p>site       - The Site. base       - The String path to the dir containing …\n"],["new","Jekyll::Layout","Jekyll/Layout.html#method-c-new","(site, base, name)","<p>Initialize a new Layout.\n<p>site - The Site. base - The String path to the source. name - The String\nfilename …\n"],["new","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-c-new","(site)",""],["new","Jekyll::Page","Jekyll/Page.html#method-c-new","(site, base, dir, name)","<p>Initialize a new Page.\n<p>site - The Site object. base - The String path to the source. dir  - The\nString …\n"],["new","Jekyll::Pager","Jekyll/Pager.html#method-c-new","(site, page, all_posts, num_pages = nil)","<p>Initialize a new Pager.\n<p>site     - the Jekyll::Site object page      - The Integer page number.\nall_posts …\n"],["new","Jekyll::Plugin","Jekyll/Plugin.html#method-c-new","(config = {})","<p>Initialize a new plugin. This should be overridden by the subclass.\n<p>config - The Hash of configuration …\n"],["new","Jekyll::PluginManager","Jekyll/PluginManager.html#method-c-new","(site)","<p>Create an instance of this class.\n<p>site - the instance of Jekyll::Site we&#39;re concerned with\n<p>Returns …\n"],["new","Jekyll::Post","Jekyll/Post.html#method-c-new","(site, source, dir, name)","<p>Initialize this Post instance.\n<p>site       - The Site. base       - The String path to the dir containing …\n"],["new","Jekyll::Publisher","Jekyll/Publisher.html#method-c-new","(site)",""],["new","Jekyll::RelatedPosts","Jekyll/RelatedPosts.html#method-c-new","(post)",""],["new","Jekyll::Renderer","Jekyll/Renderer.html#method-c-new","(site, document)",""],["new","Jekyll::Site","Jekyll/Site.html#method-c-new","(config)","<p>Public: Initialize a new Site.\n<p>config - A Hash containing site configuration details.\n"],["new","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-c-new","(site)",""],["new","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-new","(site, base, dir, name)","<p>Initialize a new StaticFile.\n<p>site - The Site. base - The String path to the &lt;source&gt;. dir  - The …\n"],["new","Jekyll::Stevenson","Jekyll/Stevenson.html#method-c-new","(level = INFO)","<p>Public: Create a new instance of Stevenson, Jekyll&#39;s logger\n<p>level - (optional, integer) the log level …\n"],["new","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-c-new","(tag_name, markup, tokens)",""],["new","Jekyll::Tags::IncludeTagError","Jekyll/Tags/IncludeTagError.html#method-c-new","(msg, path)",""],["new","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-c-new","(name)",""],["new","Jekyll::Tags::PostUrl","Jekyll/Tags/PostUrl.html#method-c-new","(tag_name, post, tokens)",""],["new","Jekyll::URL","Jekyll/URL.html#method-c-new","(options)","<p>options - One of :permalink or :template must be supplied.\n\n<pre>:template     - The String used as template ...</pre>\n"],["new_dirs","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-new_dirs","()","<p>Private: The list of directories to be created when site is built. These\nare the parent directories of …\n"],["new_files","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-new_files","()","<p>Private: The list of files to be created when site is built.\n<p>Returns a Set with the file paths\n"],["next","Jekyll::Post","Jekyll/Post.html#method-i-next","()",""],["no_subcommand","Jekyll::Deprecator","Jekyll/Deprecator.html#method-c-no_subcommand","(args)",""],["number_of_words","Jekyll::Filters","Jekyll/Filters.html#method-i-number_of_words","(input)","<p>Count the number of words in the input string.\n<p>input - The String on which to operate.\n<p>Returns the Integer …\n"],["obsolete_files","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-obsolete_files","()","<p>Private: The list of files and directories to be deleted during cleanup\nprocess\n<p>Returns an Array of the …\n"],["output_ext","Jekyll::Converters::Identity","Jekyll/Converters/Identity.html#method-i-output_ext","(ext)",""],["output_ext","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-output_ext","(ext)",""],["output_ext","Jekyll::Converters::Textile","Jekyll/Converters/Textile.html#method-i-output_ext","(ext)",""],["output_ext","Jekyll::Convertible","Jekyll/Convertible.html#method-i-output_ext","()","<p>Determine the extension depending on content_type.\n<p>Returns the String extension for the output file.\n\n<pre>e.g. ...</pre>\n"],["output_ext","Jekyll::Renderer","Jekyll/Renderer.html#method-i-output_ext","()","<p>Determine the extname the outputted file should have\n<p>Returns the output extname including the leading …\n"],["paginate","Jekyll::Generators::Pagination","Jekyll/Generators/Pagination.html#method-i-paginate","(site, page)","<p>Paginates the blog&#39;s posts. Renders the index.html file into paginated\ndirectories, e.g.: page2/index.html …\n"],["paginate_path","Jekyll::Pager","Jekyll/Pager.html#method-c-paginate_path","(site, num_page)","<p>Static: Return the pagination path of the page\n<p>site     - the Jekyll::Site object num_page - the pagination …\n"],["pagination_candidate?","Jekyll::Pager","Jekyll/Pager.html#method-c-pagination_candidate-3F","(config, page)","<p>Static: Determine if a page is a possible candidate to be a template page.\n\n<pre>Page&#39;s name must be `index.html` ...</pre>\n"],["pagination_enabled?","Jekyll::Pager","Jekyll/Pager.html#method-c-pagination_enabled-3F","(site)","<p>Determine if pagination is enabled the site.\n<p>site - the Jekyll::Site object\n<p>Returns true if pagination …\n"],["parse_params","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-parse_params","(context)",""],["path","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-path","()","<p>&#39;Path&#39; of the excerpt.\n<p>Returns the path for the post this excerpt belongs to with #excerpt\nappended …\n"],["path","Jekyll::Page","Jekyll/Page.html#method-i-path","()","<p>The path to the source file\n<p>Returns the path to the source file\n"],["path","Jekyll::Post","Jekyll/Post.html#method-i-path","()","<p>Public: the path to the post relative to the site source,\n\n<pre>from the YAML Front-Matter or from a combination ...</pre>\n"],["path","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-path","()","<p>Returns source file path.\n"],["path_relative_to_source","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-path_relative_to_source","(dir, path)",""],["permalink","Jekyll::Document","Jekyll/Document.html#method-i-permalink","()","<p>The permalink for this Document. Permalink is set via the data Hash.\n<p>Returns the permalink or nil if no …\n"],["permalink","Jekyll::Page","Jekyll/Page.html#method-i-permalink","()","<p>The full path and filename of the post. Defined in the YAML of the post\nbody.\n<p>Returns the String permalink …\n"],["permalink","Jekyll::Post","Jekyll/Post.html#method-i-permalink","()","<p>The full path and filename of the post. Defined in the YAML of the post\nbody (optional).\n<p>Returns the  …\n"],["place_in_layouts","Jekyll::Renderer","Jekyll/Renderer.html#method-i-place_in_layouts","(content, payload, info)","<p>Render layouts and place given content inside.\n<p>content - the content to be placed in the layout\n<p>Returns …\n"],["plugin_allowed?","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-plugin_allowed-3F","(gem_name)","<p>Check whether a gem plugin is allowed to be used during this build.\n<p>gem_name - the name of the gem\n<p>Returns …\n"],["plugins_path","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-plugins_path","()","<p>Public: Setup the plugin search path\n<p>Returns an Array of plugin search paths\n"],["pluralized_array_from_hash","Jekyll::Utils","Jekyll/Utils.html#method-c-pluralized_array_from_hash","(hash, singular_key, plural_key)","<p>Read array from the supplied hash favouring the singular key and then the\nplural key, and handling any …\n"],["populate_categories","Jekyll::Post","Jekyll/Post.html#method-i-populate_categories","()",""],["populate_tags","Jekyll::Post","Jekyll/Post.html#method-i-populate_tags","()",""],["post_attr_hash","Jekyll::Site","Jekyll/Site.html#method-i-post_attr_hash","(post_attr)","<p>Construct a Hash of Posts indexed by the specified Post attribute.\n<p>post_attr - The String name of the …\n"],["post_slug","Jekyll::Tags::PostComparer","Jekyll/Tags/PostComparer.html#method-i-post_slug","(other)","<p>Construct the directory-aware post slug for a Jekyll::Post\n<p>other - the Jekyll::Post\n<p>Returns the post slug …\n"],["preserve_source_location?","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-preserve_source_location-3F","(path, options)",""],["previous","Jekyll::Post","Jekyll/Post.html#method-i-previous","()",""],["print_errors_and_fail","Jekyll::Converters::Markdown::MarukuParser","Jekyll/Converters/Markdown/MarukuParser.html#method-i-print_errors_and_fail","()",""],["priority","Jekyll::Plugin","Jekyll/Plugin.html#method-c-priority","(priority = nil)","<p>Get or set the priority of this plugin. When called without an argument it\nreturns the priority. When …\n"],["process","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-process","(options)","<p>Build your jekyll site Continuously watch if `watch` is set to true in the\nconfig.\n"],["process","Jekyll::Commands::Doctor","Jekyll/Commands/Doctor.html#method-c-process","(options)",""],["process","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-process","(args, options = {})",""],["process","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-process","(options)","<p>Boot up a WEBrick server which points to the compiled site&#39;s root.\n"],["process","Jekyll::Deprecator","Jekyll/Deprecator.html#method-c-process","(args)",""],["process","Jekyll::Draft","Jekyll/Draft.html#method-i-process","(name)","<p>Extract information from the post filename.\n<p>name - The String filename of the post file.\n<p>Returns nothing. …\n"],["process","Jekyll::Layout","Jekyll/Layout.html#method-i-process","(name)","<p>Extract information from the layout filename.\n<p>name - The String filename of the layout file.\n<p>Returns nothing. …\n"],["process","Jekyll::Page","Jekyll/Page.html#method-i-process","(name)","<p>Extract information from the page filename.\n<p>name - The String filename of the page file.\n<p>Returns nothing. …\n"],["process","Jekyll::Post","Jekyll/Post.html#method-i-process","(name)","<p>Extract information from the post filename.\n<p>name - The String filename of the post file.\n<p>Returns nothing. …\n"],["process","Jekyll::Site","Jekyll/Site.html#method-i-process","()","<p>Public: Read, process, and write this Site to output.\n<p>Returns nothing.\n"],["process_site","Jekyll::Command","Jekyll/Command.html#method-c-process_site","(site)","<p>Run Site#process and catch errors\n<p>site - the Jekyll::Site object\n<p>Returns nothing\n"],["publish?","Jekyll::Publisher","Jekyll/Publisher.html#method-i-publish-3F","(thing)",""],["published?","Jekyll::Convertible","Jekyll/Convertible.html#method-i-published-3F","()","<p>Whether the file is published or not, as indicated in YAML front-matter\n"],["published?","Jekyll::Document","Jekyll/Document.html#method-i-published-3F","()","<p>Whether the file is published or not, as indicated in YAML front-matter\n<p>Returns true if the &#39;published&#39; …\n"],["publisher","Jekyll::Site","Jekyll/Site.html#method-i-publisher","()",""],["read","Jekyll::Collection","Jekyll/Collection.html#method-i-read","()","<p>Read the allowed documents into the collection&#39;s array of docs.\n<p>Returns the sorted array of docs. …\n"],["read","Jekyll::Document","Jekyll/Document.html#method-i-read","(opts = {})","<p>Read in the file and assign the content and data based on the file\ncontents.\n<p>Returns nothing.\n"],["read","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-read","()",""],["read","Jekyll::Site","Jekyll/Site.html#method-i-read","()","<p>Read Site data from disk and load it into internal data structures.\n<p>Returns nothing.\n"],["read_collections","Jekyll::Site","Jekyll/Site.html#method-i-read_collections","()","<p>Read in all collections specified in the configuration\n<p>Returns nothing.\n"],["read_config_file","Jekyll::Configuration","Jekyll/Configuration.html#method-i-read_config_file","(file)","<p>Public: Read configuration and return merged Hash\n<p>file - the path to the YAML file to be read in\n<p>Returns …\n"],["read_config_files","Jekyll::Configuration","Jekyll/Configuration.html#method-i-read_config_files","(files)","<p>Public: Read in a list of configuration files and merge with this hash\n<p>files - the list of configuration …\n"],["read_content","Jekyll::Site","Jekyll/Site.html#method-i-read_content","(dir, magic_dir, klass)",""],["read_data","Jekyll::Site","Jekyll/Site.html#method-i-read_data","(dir)","<p>Read and parse all yaml files under &lt;source&gt;/&lt;dir&gt;\n<p>Returns nothing\n"],["read_directories","Jekyll::Site","Jekyll/Site.html#method-i-read_directories","(dir = '')","<p>Recursively traverse directories to find posts, pages and static files that\nwill become part of the site …\n"],["read_drafts","Jekyll::Site","Jekyll/Site.html#method-i-read_drafts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_drafts and create a new\nPost object with each one. …\n"],["read_posts","Jekyll::Site","Jekyll/Site.html#method-i-read_posts","(dir)","<p>Read all the files in &lt;source&gt;/&lt;dir&gt;/_posts and create a new\nPost object with each one.\n<p>dir …\n"],["read_yaml","Jekyll::Convertible","Jekyll/Convertible.html#method-i-read_yaml","(base, name, opts = {})","<p>Read the YAML frontmatter.\n<p>base - The String path to the dir containing the file. name - The String\nfilename …\n"],["read_yaml","Jekyll::Post","Jekyll/Post.html#method-i-read_yaml","(base, name)","<p>Read the YAML frontmatter.\n<p>base - The String path to the dir containing the file. name - The String\nfilename …\n"],["realpath_prefixed_with?","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-realpath_prefixed_with-3F","(path, dir)",""],["related_posts","Jekyll::Post","Jekyll/Post.html#method-i-related_posts","(posts)","<p>Calculate related posts.\n<p>Returns an Array of related Posts.\n"],["relative_directory","Jekyll::Collection","Jekyll/Collection.html#method-i-relative_directory","()","<p>The directory for this Collection, relative to the site source.\n<p>Returns a String containing the directory …\n"],["relative_path","Jekyll::Document","Jekyll/Document.html#method-i-relative_path","()","<p>The path to the document, relative to the site source.\n<p>Returns a String path which represents the relative …\n"],["relative_path","Jekyll::Draft","Jekyll/Draft.html#method-i-relative_path","()","<p>The path to the draft source file, relative to the site source\n"],["relative_path","Jekyll::Page","Jekyll/Page.html#method-i-relative_path","()","<p>The path to the page source file, relative to the site source\n"],["relative_path","Jekyll::Post","Jekyll/Post.html#method-i-relative_path","()","<p>The path to the post source file, relative to the site source\n"],["relative_path","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-relative_path","()","<p>Returns the source file path relative to the site source\n"],["relative_permalinks_deprecation_method","Jekyll::Site","Jekyll/Site.html#method-i-relative_permalinks_deprecation_method","()",""],["relative_to_source","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-relative_to_source","(entry)",""],["remove_leading_slash","Jekyll::Pager","Jekyll/Pager.html#method-c-remove_leading_slash","(path)","<p>Static: Return a String version of the input without a leading slash.\n<p>path - a String path\n<p>Returns the …\n"],["render","Jekyll::GistTag","Jekyll/GistTag.html#method-i-render","(context)",""],["render","Jekyll::Page","Jekyll/Page.html#method-i-render","(layouts, site_payload)","<p>Add any necessary layouts to this post\n<p>layouts      - The Hash of {“name” =&gt; “layout”}. …\n"],["render","Jekyll::Post","Jekyll/Post.html#method-i-render","(layouts, site_payload)","<p>Add any necessary layouts to this post.\n<p>layouts      - A Hash of {“name” =&gt; “layout”}. …\n"],["render","Jekyll::Site","Jekyll/Site.html#method-i-render","()","<p>Render the site to the destination.\n<p>Returns nothing.\n"],["render","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render","(context)",""],["render","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-render","(context)",""],["render","Jekyll::Tags::PostUrl","Jekyll/Tags/PostUrl.html#method-i-render","(context)",""],["render_all_layouts","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_all_layouts","(layouts, payload, info)","<p>Recursively render layouts\n<p>layouts - a list of the layouts payload - the payload for Liquid info    -\n…\n"],["render_codehighlighter","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render_codehighlighter","(context, code)",""],["render_liquid","Jekyll::Convertible","Jekyll/Convertible.html#method-i-render_liquid","(content, payload, info, path = nil)","<p>Render Liquid in the content\n<p>content - the raw Liquid content to render payload - the payload for Liquid\n…\n"],["render_liquid","Jekyll::Renderer","Jekyll/Renderer.html#method-i-render_liquid","(content, payload, info, path = nil)","<p>Render the given content with the payload and info\n<p>content - payload - info    - path    - (optional) …\n"],["render_pygments","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render_pygments","(context, code)",""],["render_rouge","Jekyll::Tags::HighlightBlock","Jekyll/Tags/HighlightBlock.html#method-i-render_rouge","(context, code)",""],["render_variable","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-render_variable","(context)","<p>Render the variable if required\n"],["render_with_liquid?","Jekyll::Document","Jekyll/Document.html#method-i-render_with_liquid-3F","()","<p>Determine whether the file should be rendered with Liquid.\n<p>Returns false if the document is either an …\n"],["replace_generated_toc","Jekyll::Converters::Markdown::RDiscountParser","Jekyll/Converters/Markdown/RDiscountParser.html#method-i-replace_generated_toc","(rd, html, toc_token)",""],["replaced_files","Jekyll::Site::Cleaner","Jekyll/Site/Cleaner.html#method-i-replaced_files","()","<p>Private: The list of existing files that will be replaced by a directory\nduring build\n<p>Returns a Set with …\n"],["require_all","Object","Object.html#method-i-require_all","(path)","<p>Require all of the Ruby files in the given directory.\n<p>path - The String relative path from here to the …\n"],["require_gems","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_gems","()","<p>Require each of the gem plugins specified.\n<p>Returns nothing.\n"],["require_plugin_files","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-require_plugin_files","()","<p>Require all .rb files if safe mode is off\n<p>Returns nothing.\n"],["reset","Jekyll::Site","Jekyll/Site.html#method-i-reset","()","<p>Reset Site details.\n<p>Returns nothing\n"],["reset_cache","Jekyll::StaticFile","Jekyll/StaticFile.html#method-c-reset_cache","()","<p>Reset the mtimes cache (for testing purposes).\n<p>Returns nothing.\n"],["rouge_formatter","Jekyll::Converters::Markdown::RedcarpetParser::WithRouge","Jekyll/Converters/Markdown/RedcarpetParser/WithRouge.html#method-i-rouge_formatter","(opts = {})",""],["run","Jekyll::Renderer","Jekyll/Renderer.html#method-i-run","()","<p>DAT RENDER THO\n"],["safe","Jekyll::Plugin","Jekyll/Plugin.html#method-c-safe","(safe = nil)","<p>Get or set the safety of this plugin. When called without an argument it\nreturns the safety. When an …\n"],["safe_load_file","Jekyll::Configuration","Jekyll/Configuration.html#method-i-safe_load_file","(filename)",""],["sanitize_filename","Jekyll::Site","Jekyll/Site.html#method-i-sanitize_filename","(name)",""],["sanitize_label","Jekyll::Collection","Jekyll/Collection.html#method-i-sanitize_label","(label)","<p>Produce a sanitized label name Label names may not contain anything but\nalphanumeric characters,\n\n<pre>underscores, ...</pre>\n"],["sanitize_url","Jekyll::URL","Jekyll/URL.html#method-i-sanitize_url","(in_url)","<p>Returns a sanitized String URL\n"],["sanitized_path","Jekyll","Jekyll.html#method-c-sanitized_path","(base_directory, questionable_path)",""],["scaffold_path","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-scaffold_path","()",""],["scaffold_post_content","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-scaffold_post_content","()",""],["set_timezone","Jekyll","Jekyll.html#method-c-set_timezone","(timezone)","<p>Static: Set the TZ environment variable to use the timezone specified\n<p>timezone - the IANA Time Zone\n<p>Returns …\n"],["setup","Jekyll::Converters::Markdown","Jekyll/Converters/Markdown.html#method-i-setup","()",""],["setup","Jekyll::Converters::Textile","Jekyll/Converters/Textile.html#method-i-setup","()",""],["setup","Jekyll::Site","Jekyll/Site.html#method-i-setup","()","<p>Load necessary libraries, plugins, converters, and generators.\n<p>Returns nothing.\n"],["site_cleaner","Jekyll::Site","Jekyll/Site.html#method-i-site_cleaner","()",""],["site_data","Jekyll::Site","Jekyll/Site.html#method-i-site_data","()","<p>Prepare site data for site payload. The method maintains backward\ncompatibility if the key &#39;data&#39; …\n"],["site_payload","Jekyll::Site","Jekyll/Site.html#method-i-site_payload","()","<p>The Hash payload containing site-wide data.\n<p>Returns the Hash: { “site” =&gt; data } where data …\n"],["site_template","Jekyll::Commands::New","Jekyll/Commands/New.html#method-c-site_template","()",""],["source","Jekyll::Configuration","Jekyll/Configuration.html#method-i-source","(override)","<p>Public: Directory of the Jekyll source folder\n<p>override - the command-line options hash\n<p>Returns the path …\n"],["source","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-source","(file, context)","<p>This method allows to modify the file content by inheriting from the class.\n"],["special?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-special-3F","(entry)",""],["start_callback","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-start_callback","(detached)",""],["stringify_hash_keys","Jekyll::Utils","Jekyll/Utils.html#method-c-stringify_hash_keys","(hash)","<p>Apply #to_s to all keys in the Hash\n<p>hash - the hash to which to apply this transformation\n<p>Returns a new …\n"],["stringify_keys","Jekyll::Configuration","Jekyll/Configuration.html#method-i-stringify_keys","()","<p>Public: Turn all keys into string\n<p>Return a copy of the hash where all its keys are strings\n"],["subclasses","Jekyll::Command","Jekyll/Command.html#method-c-subclasses","()","<p>A list of subclasses of Jekyll::Command\n"],["subclasses","Jekyll::Plugin","Jekyll/Plugin.html#method-c-subclasses","()","<p>The list of Classes that have been subclassed.\n<p>Returns an Array of Class objects.\n"],["symbolize_hash_keys","Jekyll::Utils","Jekyll/Utils.html#method-c-symbolize_hash_keys","(hash)","<p>Apply #to_sym to all keys in the hash\n<p>hash - the hash to which to apply this transformation\n<p>Returns a new …\n"],["symlink?","Jekyll::EntryFilter","Jekyll/EntryFilter.html#method-i-symlink-3F","(entry)",""],["tags","Jekyll::Site","Jekyll/Site.html#method-i-tags","()",""],["template","Jekyll::Page","Jekyll/Page.html#method-i-template","()","<p>The template of the permalink.\n<p>Returns the template String.\n"],["template","Jekyll::Post","Jekyll/Post.html#method-i-template","()",""],["template_page","Jekyll::Generators::Pagination","Jekyll/Generators/Pagination.html#method-i-template_page","(site)","<p>Public: Find the Jekyll::Page which will act as the pager template\n<p>site - the Jekyll::Site object\n<p>Returns …\n"],["textilize","Jekyll::Filters","Jekyll/Filters.html#method-i-textilize","(input)","<p>Convert a Textile string into HTML output.\n<p>input - The Textile String to convert.\n<p>Returns the HTML formatted …\n"],["time","Jekyll::Filters","Jekyll/Filters.html#method-i-time","(input)",""],["title","Jekyll::Post","Jekyll/Post.html#method-i-title","()","<p>Public: the Post title, from the YAML Front-Matter or from the slug\n<p>Returns the post title\n"],["titleized_slug","Jekyll::Post","Jekyll/Post.html#method-i-titleized_slug","()","<p>Turns the post slug into a suitable title\n"],["to_liquid","Jekyll::Collection","Jekyll/Collection.html#method-i-to_liquid","()","<p>Produce a representation of this Collection for use in Liquid. Exposes two\nattributes:\n\n<pre>- label\n- docs</pre>\n"],["to_liquid","Jekyll::Convertible","Jekyll/Convertible.html#method-i-to_liquid","(attrs = nil)","<p>Convert this Convertible&#39;s data to a Hash suitable for use by Liquid.\n<p>Returns the Hash representation …\n"],["to_liquid","Jekyll::Document","Jekyll/Document.html#method-i-to_liquid","()","<p>Create a Liquid-understandable version of this Document.\n<p>Returns a Hash representing this Document&#39;s …\n"],["to_liquid","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-to_liquid","()",""],["to_liquid","Jekyll::Pager","Jekyll/Pager.html#method-i-to_liquid","()","<p>Convert this Pager&#39;s data to a Hash suitable for use by Liquid.\n<p>Returns the Hash representation of …\n"],["to_liquid","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-to_liquid","()",""],["to_render","Jekyll::Site","Jekyll/Site.html#method-i-to_render","()","<p>The list of collections to render.\n<p>The array of collection labels to render.\n"],["to_s","Jekyll::Convertible","Jekyll/Convertible.html#method-i-to_s","()","<p>Returns the contents as a String.\n"],["to_s","Jekyll::Document","Jekyll/Document.html#method-i-to_s","()","<p>The string representation for this document.\n<p>Returns the content of the document\n"],["to_s","Jekyll::Excerpt","Jekyll/Excerpt.html#method-i-to_s","()",""],["to_s","Jekyll::URL","Jekyll/URL.html#method-i-to_s","()","<p>The generated relative URL of the resource\n<p>Returns the String URL\n"],["transform","Jekyll::Convertible","Jekyll/Convertible.html#method-i-transform","()","<p>Transform the contents based on the content type.\n<p>Returns nothing.\n"],["unescape_path","Jekyll::URL","Jekyll/URL.html#method-c-unescape_path","(path)","<p>Unescapes a URL path segment\n<p>path - The path to be unescaped.\n<p>Examples:\n"],["uri_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-uri_escape","(input)","<p>URI escape a string.\n<p>input - The String to escape.\n<p>Examples\n"],["url","Jekyll::Document","Jekyll/Document.html#method-i-url","()","<p>The computed URL for the document. See `Jekyll::URL#to_s` for more details.\n<p>Returns the computed URL for …\n"],["url","Jekyll::Page","Jekyll/Page.html#method-i-url","()","<p>The generated relative url of this page. e.g. /about.html.\n<p>Returns the String url.\n"],["url","Jekyll::Post","Jekyll/Post.html#method-i-url","()","<p>The generated relative url of this post.\n<p>Returns the String url.\n"],["url_placeholders","Jekyll::Document","Jekyll/Document.html#method-i-url_placeholders","()","<p>Construct a Hash of key-value pairs which contain a mapping between\n\n<pre>a key in the URL template and the ...</pre>\n"],["url_placeholders","Jekyll::Page","Jekyll/Page.html#method-i-url_placeholders","()","<p>Returns a hash of URL placeholder names (as symbols) mapping to the desired\nplaceholder replacements. …\n"],["url_placeholders","Jekyll::Post","Jekyll/Post.html#method-i-url_placeholders","()","<p>Returns a hash of URL placeholder names (as symbols) mapping to the desired\nplaceholder replacements. …\n"],["url_template","Jekyll::Document","Jekyll/Document.html#method-i-url_template","()","<p>The URL template where the document would be accessible.\n<p>Returns the URL template for the document.\n"],["uses_relative_permalinks","Jekyll::Page","Jekyll/Page.html#method-i-uses_relative_permalinks","()",""],["valid?","Jekyll::Draft","Jekyll/Draft.html#method-c-valid-3F","(name)","<p>Draft name validator. Draft filenames must be like: my-awesome-post.textile\n<p>Returns true if valid, false …\n"],["valid?","Jekyll::Post","Jekyll/Post.html#method-c-valid-3F","(name)","<p>Post name validator. Post filenames must be like:\n2008-11-05-my-awesome-post.textile\n<p>Returns true if valid, …\n"],["validate_file_name","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_file_name","(file)",""],["validate_params","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_params","()",""],["validate_path","Jekyll::Tags::IncludeTag","Jekyll/Tags/IncludeTag.html#method-i-validate_path","(path, dir, safe)",""],["warn","Jekyll::Stevenson","Jekyll/Stevenson.html#method-i-warn","(topic, message = nil)","<p>Public: Print a jekyll message to stderr\n<p>topic - the topic of the message, e.g. “Configuration file”, …\n"],["watch","Jekyll::Commands::Build","Jekyll/Commands/Build.html#method-c-watch","(site, options)","<p>Private: Watch for file changes and rebuild the site.\n<p>site - A Jekyll::Site instance options - A Hash …\n"],["webrick_options","Jekyll::Commands::Serve","Jekyll/Commands/Serve.html#method-c-webrick_options","(config)",""],["where","Jekyll::Filters","Jekyll/Filters.html#method-i-where","(input, key, value)","<p>Filter an array of objects\n<p>input - the object array key - key within each object to filter by value -\n…\n"],["whitelist","Jekyll::PluginManager","Jekyll/PluginManager.html#method-i-whitelist","()","<p>Build an array of allowed plugin gem names.\n<p>Returns an array of strings, each string being the name of …\n"],["within","Jekyll::LayoutReader","Jekyll/LayoutReader.html#method-i-within","(directory)",""],["write","Jekyll::Convertible","Jekyll/Convertible.html#method-i-write","(dest)","<p>Write the generated page file to the destination directory.\n<p>dest - The String path to the destination …\n"],["write","Jekyll::Document","Jekyll/Document.html#method-i-write","(dest)","<p>Write the generated Document file to the destination directory.\n<p>dest - The String path to the destination …\n"],["write","Jekyll::Site","Jekyll/Site.html#method-i-write","()","<p>Write static files, pages, and posts.\n<p>Returns nothing.\n"],["write","Jekyll::StaticFile","Jekyll/StaticFile.html#method-i-write","(dest)","<p>Write the static file to the destination directory (if modified).\n<p>dest - The String path to the destination …\n"],["xml_escape","Jekyll::Filters","Jekyll/Filters.html#method-i-xml_escape","(input)","<p>XML escape a string for use. Replaces any special characters with\nappropriate HTML entity replacements. …\n"],["yaml_file?","Jekyll::Document","Jekyll/Document.html#method-i-yaml_file-3F","()","<p>Determine whether the document is a YAML file.\n<p>Returns true if the extname is either .yml or .yaml, false …\n"],["LICENSE","","LICENSE.html","","<p>(The MIT License)\n<p>Copyright © 2008-2014 Tom Preston-Werner\n<p>Permission is hereby granted, free of charge, …\n"],["README.markdown","","README_markdown.html","","<p>Jekyll\n<p>]\n<p>{Build Status]\n]\n]\n]\n"],["mime.types","","lib/jekyll/mime_types.html","","<p>-# These are the same MIME types that GitHub Pages uses as of 26 January\n2014\n<p>text/html               …\n"],["footer.html","","lib/site_template/_includes/footer_html.html","","<p>&lt;footer class=“site-footer”&gt;\n\n<pre>&lt;div class=&quot;wrap&quot;&gt;\n\n  &lt;h2 class=&quot;footer-heading&quot;&gt;Bart Simpson&lt;/h2&gt; ...</pre>\n"],["head.html","","lib/site_template/_includes/head_html.html","","<p>&lt;head&gt;\n\n<pre>&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n&lt;title&gt;{% if ...</pre>\n"],["header.html","","lib/site_template/_includes/header_html.html","","<p>&lt;header class=“site-header”&gt;\n\n<pre>&lt;div class=&quot;wrap&quot;&gt;\n\n  &lt;a class=&quot;site-title&quot; href=&quot;/&quot;&gt;{{ site.name ...</pre>\n"],["default.html","","lib/site_template/_layouts/default_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt;\n\n<pre>{% include head.html %}\n\n  &lt;body&gt;\n\n  {% include header.html %}\n\n  &lt;div ...</pre>\n"],["page.html","","lib/site_template/_layouts/page_html.html","","<p>layout: default\n<p>&lt;div class=“post”&gt;\n\n<pre>&lt;header class=&quot;post-header&quot;&gt;\n  &lt;h1&gt;{{ page.title }}&lt;/h1&gt; ...</pre>\n"],["post.html","","lib/site_template/_layouts/post_html.html","","<p>layout: default\n<p>&lt;div class=“post”&gt;\n\n<pre>&lt;header class=&quot;post-header&quot;&gt;\n  &lt;h1&gt;{{ page.title }}&lt;/h1&gt; ...</pre>\n"],["index","","lib/site_template/about/index_md.html","","<p>—\nlayout: page\n<p>title: About\n<p>This is the base Jekyll theme. You can find out more info about customizing\n…\n"],["main.css","","lib/site_template/css/main_css.html","","\n<pre> Base   \n ----------------------------------------------------------  \n\n{\nmargin: 0;\npadding: 0;</pre>\n<p>}\n<p>html, …\n"],["feed.xml","","lib/site_template/feed_xml.html","","<p>layout: none\n<p>&lt;?xml version=“1.0” encoding=“UTF-8”?&gt; &lt;rss version=“2.0” …\n"],["index.html","","lib/site_template/index_html.html","","<p>layout: default\n<p>&lt;div class=“home”&gt;\n\n<pre>&lt;h1&gt;Posts&lt;/h1&gt;\n\n&lt;ul class=&quot;posts&quot;&gt;\n  {% for post in ...</pre>\n"],["index","","lib/site_template/projects/index_md.html","","<p>—\nlayout: page\n<p>title: Projects\n<p>Just a sample of another page that you could include for some purpose …\n"]]}}