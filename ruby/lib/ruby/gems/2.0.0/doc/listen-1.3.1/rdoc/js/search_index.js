var search_data = {"index":{"searchIndex":["listen","adapter","adapters","adapter","bsd","darwin","linux","polling","windows","directoryrecord","listener","turnstile","_init_listener()","adapter_gem()","adapter_gem()","adapter_gem()","adapter_gem()","at_least_ruby_1_9?()","blocking_thread()","blocking_thread()","build()","build_directories_records()","change()","content_modified?()","default_latency()","default_latency()","detect_additions()","detect_modification()","detect_modification_or_removal_for_dir()","detect_modification_or_removal_for_file()","detect_modifications_and_removals()","existing_path?()","fetch_changes()","fetch_records_changes()","filter()","filter()","filter!()","filter!()","filtered?()","filtering_patterns()","force_adapter()","force_polling()","generate_default_ignoring_patterns()","ignore()","ignore()","ignore!()","ignore!()","ignored?()","ignoring_patterns()","important_paths()","initialize_adapter()","initialize_directories_and_directories_records()","initialize_relative_paths_usage()","initialize_worker()","initialize_worker()","initialize_worker()","initialize_worker()","initialize_worker()","insert_path()","latency()","load_dependent_adapter()","load_dependent_adapter()","modification_detected()","mri?()","mtime_of()","new()","new()","new()","new()","new()","on_change()","pause()","pause()","paused?()","paused?()","poll_changed_directories()","poll_changed_directories()","polling_fallback_message()","relative_paths()","relative_to_base()","removal_detected()","report_changes()","select_and_initialize()","setup()","sha1_checksum()","signal()","start()","start()","start!()","start!()","start_poller()","start_worker()","start_worker()","start_worker()","start_worker()","start_worker()","start_worker()","started?()","stop()","stop()","target_os_regex()","target_os_regex()","target_os_regex()","target_os_regex()","to()","to!()","unpause()","unpause()","update_sha1_checksum()","usable?()","usable?()","usable_and_works?()","wait()","wait_for_callback()","wait_for_changes()","warn_polling_fallback()","works?()"],"longSearchIndex":["listen","listen::adapter","listen::adapters","listen::adapters::adapter","listen::adapters::bsd","listen::adapters::darwin","listen::adapters::linux","listen::adapters::polling","listen::adapters::windows","listen::directoryrecord","listen::listener","listen::turnstile","listen::_init_listener()","listen::adapters::bsd::adapter_gem()","listen::adapters::darwin::adapter_gem()","listen::adapters::linux::adapter_gem()","listen::adapters::windows::adapter_gem()","listen::adapters::windows::at_least_ruby_1_9?()","listen::adapter#blocking_thread()","listen::adapters::polling#blocking_thread()","listen::directoryrecord#build()","listen::listener#build_directories_records()","listen::listener#change()","listen::directoryrecord#content_modified?()","listen::adapter#default_latency()","listen::adapters::polling#default_latency()","listen::directoryrecord#detect_additions()","listen::directoryrecord#detect_modification()","listen::directoryrecord#detect_modification_or_removal_for_dir()","listen::directoryrecord#detect_modification_or_removal_for_file()","listen::directoryrecord#detect_modifications_and_removals()","listen::directoryrecord#existing_path?()","listen::directoryrecord#fetch_changes()","listen::listener#fetch_records_changes()","listen::directoryrecord#filter()","listen::listener#filter()","listen::directoryrecord#filter!()","listen::listener#filter!()","listen::directoryrecord#filtered?()","listen::directoryrecord#filtering_patterns()","listen::listener#force_adapter()","listen::listener#force_polling()","listen::directoryrecord::generate_default_ignoring_patterns()","listen::directoryrecord#ignore()","listen::listener#ignore()","listen::directoryrecord#ignore!()","listen::listener#ignore!()","listen::directoryrecord#ignored?()","listen::directoryrecord#ignoring_patterns()","listen::directoryrecord#important_paths()","listen::listener#initialize_adapter()","listen::listener#initialize_directories_and_directories_records()","listen::listener#initialize_relative_paths_usage()","listen::adapter#initialize_worker()","listen::adapters::bsd#initialize_worker()","listen::adapters::darwin#initialize_worker()","listen::adapters::linux#initialize_worker()","listen::adapters::windows#initialize_worker()","listen::directoryrecord#insert_path()","listen::listener#latency()","listen::adapter::load_dependent_adapter()","listen::adapters::windows::load_dependent_adapter()","listen::directoryrecord#modification_detected()","listen::adapters::windows::mri?()","listen::directoryrecord#mtime_of()","listen::adapter::new()","listen::adapters::linux::new()","listen::directoryrecord::new()","listen::listener::new()","listen::turnstile::new()","listen::listener#on_change()","listen::adapter#pause()","listen::listener#pause()","listen::adapter#paused?()","listen::listener#paused?()","listen::adapter#poll_changed_directories()","listen::adapters::polling#poll_changed_directories()","listen::listener#polling_fallback_message()","listen::listener#relative_paths()","listen::directoryrecord#relative_to_base()","listen::directoryrecord#removal_detected()","listen::adapter#report_changes()","listen::adapter::select_and_initialize()","listen::listener#setup()","listen::directoryrecord#sha1_checksum()","listen::turnstile#signal()","listen::adapter#start()","listen::listener#start()","listen::adapter#start!()","listen::listener#start!()","listen::adapter#start_poller()","listen::adapter#start_worker()","listen::adapters::bsd#start_worker()","listen::adapters::darwin#start_worker()","listen::adapters::linux#start_worker()","listen::adapters::polling#start_worker()","listen::adapters::windows#start_worker()","listen::adapter#started?()","listen::adapter#stop()","listen::listener#stop()","listen::adapters::bsd::target_os_regex()","listen::adapters::darwin::target_os_regex()","listen::adapters::linux::target_os_regex()","listen::adapters::windows::target_os_regex()","listen::to()","listen::to!()","listen::adapter#unpause()","listen::listener#unpause()","listen::directoryrecord#update_sha1_checksum()","listen::adapter::usable?()","listen::adapters::windows::usable?()","listen::adapter::usable_and_works?()","listen::turnstile#wait()","listen::adapter#wait_for_callback()","listen::adapter#wait_for_changes()","listen::adapter::warn_polling_fallback()","listen::adapter::works?()"],"info":[["Listen","","Listen.html","",""],["Listen::Adapter","","Listen/Adapter.html","",""],["Listen::Adapters","","Listen/Adapters.html","",""],["Listen::Adapters::Adapter","","Listen/Adapters/Adapter.html","",""],["Listen::Adapters::BSD","","Listen/Adapters/BSD.html","","<p>Listener implementation for BSD&#39;s `kqueue`.\n"],["Listen::Adapters::Darwin","","Listen/Adapters/Darwin.html","","<p>Adapter implementation for Mac OS X `FSEvents`.\n"],["Listen::Adapters::Linux","","Listen/Adapters/Linux.html","","<p>Listener implementation for Linux `inotify`.\n"],["Listen::Adapters::Polling","","Listen/Adapters/Polling.html","","<p>Polling Adapter that works cross-platform and has no dependencies. This is\nthe adapter that uses the …\n"],["Listen::Adapters::Windows","","Listen/Adapters/Windows.html","","<p>Adapter implementation for Windows `wdm`.\n"],["Listen::DirectoryRecord","","Listen/DirectoryRecord.html","","<p>The directory record stores information about a directory and keeps track\nof changes to the structure …\n"],["Listen::Listener","","Listen/Listener.html","",""],["Listen::Turnstile","","Listen/Turnstile.html","","<p>Allows two threads to wait on eachother.\n<p>@note Only two threads can be used with this Turnstile\n\n<pre>because ...</pre>\n"],["_init_listener","Listen","Listen.html#method-c-_init_listener","(*args, &block)","<p>@private\n"],["adapter_gem","Listen::Adapters::BSD","Listen/Adapters/BSD.html#method-c-adapter_gem","()",""],["adapter_gem","Listen::Adapters::Darwin","Listen/Adapters/Darwin.html#method-c-adapter_gem","()",""],["adapter_gem","Listen::Adapters::Linux","Listen/Adapters/Linux.html#method-c-adapter_gem","()",""],["adapter_gem","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-c-adapter_gem","()",""],["at_least_ruby_1_9?","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-c-at_least_ruby_1_9-3F","()","<p>Checks if Ruby engine is MRI.\n<p>@return [Boolean]\n"],["blocking_thread","Listen::Adapter","Listen/Adapter.html#method-i-blocking_thread","()","<p>The thread on which the main thread should wait when the adapter has been\nstarted in blocking mode.\n<p>@note …\n"],["blocking_thread","Listen::Adapters::Polling","Listen/Adapters/Polling.html#method-i-blocking_thread","()","<p>The thread on which the main thread should wait when the adapter has been\nstarted in blocking mode.\n<p>@see …\n"],["build","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-build","()","<p>Finds the paths that should be stored and adds them to the paths&#39; hash.\n"],["build_directories_records","Listen::Listener","Listen/Listener.html#method-i-build_directories_records","()","<p>Build the watched directories&#39; records.\n"],["change","Listen::Listener","Listen/Listener.html#method-i-change","(&block)","<p>Sets the callback that gets called on changes.\n<p>@example Assign a callback to be called on changes\n\n<pre>callback ...</pre>\n"],["content_modified?","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-content_modified-3F","(path)","<p>Returns whether or not a file&#39;s content has been modified by comparing\nthe SHA1-checksum to a stored …\n"],["default_latency","Listen::Adapter","Listen/Adapter.html#method-i-default_latency","()","<p>The default delay between checking for changes.\n<p>@note This method can be overriden on a per-adapter basis. …\n"],["default_latency","Listen::Adapters::Polling","Listen/Adapters/Polling.html#method-i-default_latency","()","<p>The default delay between checking for changes.\n<p>@see Listen::Adapter#default_latency\n"],["detect_additions","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-detect_additions","(directory, options = {})","<p>Detects additions in a directory.\n<p>@param [String] directory the path to analyze @param [Hash] options …\n"],["detect_modification","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-detect_modification","(path, meta_data, options)",""],["detect_modification_or_removal_for_dir","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-detect_modification_or_removal_for_dir","(path, options)",""],["detect_modification_or_removal_for_file","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-detect_modification_or_removal_for_file","(path, meta_data, options)",""],["detect_modifications_and_removals","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-detect_modifications_and_removals","(directory, options = {})","<p>Detects modifications and removals recursively in a directory.\n<p>@note Modifications detection begins by …\n"],["existing_path?","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-existing_path-3F","(path)","<p>Returns whether or not a path exists in the paths hash.\n<p>@param [String] path the path to check\n<p>@return …\n"],["fetch_changes","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-fetch_changes","(directories, options = {})","<p>Detects changes in the passed directories, updates the record with the new\nchanges and returns the changes. …\n"],["fetch_records_changes","Listen::Listener","Listen/Listener.html#method-i-fetch_records_changes","(directories_to_search, options)","<p>Returns the sum of all the changes to the directories records\n<p>@param (see Listen::DirectoryRecord#fetch_changes …\n"],["filter","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-filter","(*regexps)","<p>Adds filtering patterns to the record.\n<p>@example Filter some files\n\n<pre>filter /\\.txt$/, /.*\\.zip/</pre>\n"],["filter","Listen::Listener","Listen/Listener.html#method-i-filter","(*regexps)","<p>Adds filtering patterns to the listener.\n<p>@param (see Listen::DirectoryRecord#filter)\n<p>@return [Listen::Listener] …\n"],["filter!","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-filter-21","(*regexps)","<p>Replaces filtering patterns in the record.\n<p>@example Filter only these files\n\n<pre>filter! /\\.txt$/, /.*\\.zip/</pre>\n"],["filter!","Listen::Listener","Listen/Listener.html#method-i-filter-21","(*regexps)","<p>Replaces filtering patterns in the listener.\n<p>@param (see Listen::DirectoryRecord#filter!)\n<p>@return [Listen::Listener] …\n"],["filtered?","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-filtered-3F","(path)","<p>Returns whether a path should be filtered or not.\n<p>@param [String] path the path to test\n<p>@return [Boolean] …\n"],["filtering_patterns","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-filtering_patterns","()","<p>Returns the filtering patterns in the record to know which paths should be\nstored.\n<p>@return [Array&lt;Regexp&gt;] …\n"],["force_adapter","Listen::Listener","Listen/Listener.html#method-i-force_adapter","(adapter_class)","<p>Sets whether to force the use of a particular adapter, rather than going\nthrough usual adapter selection …\n"],["force_polling","Listen::Listener","Listen/Listener.html#method-i-force_polling","(value)","<p>Sets whether the use of the polling adapter should be forced or not.\n<p>@example Forcing the use of the polling …\n"],["generate_default_ignoring_patterns","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-c-generate_default_ignoring_patterns","()","<p>Creates the ignoring patterns from the default ignored directories and\nextensions. It memoizes the generated …\n"],["ignore","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-ignore","(*regexps)","<p>Adds ignoring patterns to the record.\n<p>@example Ignore some paths\n\n<pre>ignore %r{^ignored/path/}, /man/</pre>\n"],["ignore","Listen::Listener","Listen/Listener.html#method-i-ignore","(*regexps)","<p>Adds ignoring patterns to the listener.\n<p>@param (see Listen::DirectoryRecord#ignore)\n<p>@return [Listen::Listener] …\n"],["ignore!","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-ignore-21","(*regexps)","<p>Replaces ignoring patterns in the record.\n<p>@example Ignore only these paths\n\n<pre>ignore! %r{^ignored/path/}, ...</pre>\n"],["ignore!","Listen::Listener","Listen/Listener.html#method-i-ignore-21","(*regexps)","<p>Replaces ignoring patterns in the listener.\n<p>@param (see Listen::DirectoryRecord#ignore!)\n<p>@return [Listen::Listener] …\n"],["ignored?","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-ignored-3F","(path)","<p>Returns whether a path should be ignored or not.\n<p>@param [String] path the path to test\n<p>@return [Boolean] …\n"],["ignoring_patterns","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-ignoring_patterns","()","<p>Returns the ignoring patterns in the record to know which paths should be\nignored.\n<p>@return [Array&lt;Regexp&gt;] …\n"],["important_paths","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-important_paths","()","<p>Traverses the base directory looking for paths that should be stored; thus\npaths that are filtered or …\n"],["initialize_adapter","Listen::Listener","Listen/Listener.html#method-i-initialize_adapter","()","<p>Initializes an adapter passing it the callback and adapters&#39; options.\n"],["initialize_directories_and_directories_records","Listen::Listener","Listen/Listener.html#method-i-initialize_directories_and_directories_records","(directories)","<p>Initializes the directories to watch as well as the directories records.\n<p>@see Listen::DirectoryRecord …\n"],["initialize_relative_paths_usage","Listen::Listener","Listen/Listener.html#method-i-initialize_relative_paths_usage","(options)","<p>Initializes whether or not using relative paths.\n"],["initialize_worker","Listen::Adapter","Listen/Adapter.html#method-i-initialize_worker","()","<p>Initialize the adpater&#39; specific worker.\n<p>@note Each adapter must override this method\n\n<pre>to initialize ...</pre>\n"],["initialize_worker","Listen::Adapters::BSD","Listen/Adapters/BSD.html#method-i-initialize_worker","()","<p>Initializes a kqueue Queue and adds a watcher for each files in the\ndirectories passed to the adapter. …\n"],["initialize_worker","Listen::Adapters::Darwin","Listen/Adapters/Darwin.html#method-i-initialize_worker","()","<p>Initializes a FSEvent worker and adds a watcher for each directory passed\nto the adapter.\n<p>@return [FSEvent] …\n"],["initialize_worker","Listen::Adapters::Linux","Listen/Adapters/Linux.html#method-i-initialize_worker","()","<p>Initializes a INotify worker and adds a watcher for each directory passed\nto the adapter.\n<p>@return [INotify::Notifier] …\n"],["initialize_worker","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-i-initialize_worker","()","<p>Initializes a WDM monitor and adds a watcher for each directory passed to\nthe adapter.\n<p>@return [WDM::Monitor] …\n"],["insert_path","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-insert_path","(path)","<p>Inserts a path with its type (Dir or File) in paths hash.\n<p>@param [String] path the path to insert in @paths. …\n"],["latency","Listen::Listener","Listen/Listener.html#method-i-latency","(seconds)","<p>Sets the latency for the adapter. This is a helper method to simplify\nchanging the latency directly from …\n"],["load_dependent_adapter","Listen::Adapter","Listen/Adapter.html#method-c-load_dependent_adapter","()","<p>Load the adapter gem\n<p>@return [Boolean] whether loaded or not\n"],["load_dependent_adapter","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-c-load_dependent_adapter","()","<p>Load the adapter gem\n<p>@return [Boolean] whether required or not\n"],["modification_detected","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-modification_detected","(path, meta_data, new_mtime, options)",""],["mri?","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-c-mri-3F","()","<p>Checks if Ruby engine is MRI.\n<p>@return [Boolean]\n"],["mtime_of","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-mtime_of","(file)","<p>Returns the modification time of a file based on the precision defined by\nthe system\n<p>@param [String] file …\n"],["new","Listen::Adapter","Listen/Adapter.html#method-c-new","(directories, options = {}, &callback)","<p>Initializes the adapter.\n<p>@param [String, Array&lt;String&gt;] directories the directories to watch\n@param …\n"],["new","Listen::Adapters::Linux","Listen/Adapters/Linux.html#method-c-new","(directories, options = {}, &callback)","<p>Initializes the Adapter.\n<p>@see Listen::Adapter#initialize\n"],["new","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-c-new","(directory)","<p>Initializes a directory record.\n<p>@option [String] directory the directory to keep track of\n"],["new","Listen::Listener","Listen/Listener.html#method-c-new","(*args, &block)","<p>Initializes the directories listener.\n<p>@param [String] directory the directories to listen to @param [Hash] …\n"],["new","Listen::Turnstile","Listen/Turnstile.html#method-c-new","()","<p>Initialize the turnstile.\n"],["on_change","Listen::Listener","Listen/Listener.html#method-i-on_change","(directories, options = {})","<p>Runs the callback passing it the changes if there are any.\n<p>@param (see Listen::DirectoryRecord#fetch_changes …\n"],["pause","Listen::Adapter","Listen/Adapter.html#method-i-pause","()","<p>Pauses the adapter.\n"],["pause","Listen::Listener","Listen/Listener.html#method-i-pause","()","<p>Pauses the listener.\n<p>@return [Listen::Listener] the listener\n"],["paused?","Listen::Adapter","Listen/Adapter.html#method-i-paused-3F","()","<p>Returns whether the adapter is paused or not.\n<p>@return [Boolean] whether the adapter is paused or not\n"],["paused?","Listen::Listener","Listen/Listener.html#method-i-paused-3F","()","<p>Returns whether the listener is paused or not.\n<p>@return [Boolean] adapter paused status\n"],["poll_changed_directories","Listen::Adapter","Listen/Adapter.html#method-i-poll_changed_directories","()","<p>Polls changed directories and reports them back when there are changes.\n<p>@note This method can be overriden …\n"],["poll_changed_directories","Listen::Adapters::Polling","Listen/Adapters/Polling.html#method-i-poll_changed_directories","()","<p>Poll listener directory for file system changes.\n<p>@see Listen::Adapter#poll_changed_directories\n"],["polling_fallback_message","Listen::Listener","Listen/Listener.html#method-i-polling_fallback_message","(value)","<p>Defines a custom polling fallback message or disable it.\n<p>@example Disabling the polling fallback message …\n"],["relative_paths","Listen::Listener","Listen/Listener.html#method-i-relative_paths","(value)","<p>Sets whether the paths in the callback should be relative or absolute.\n<p>@example Enabling relative paths …\n"],["relative_to_base","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-relative_to_base","(path)","<p>Converts an absolute path to a path that&#39;s relative to the base\ndirectory.\n<p>@param [String] path the …\n"],["removal_detected","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-removal_detected","(path, meta_data, options)",""],["report_changes","Listen::Adapter","Listen/Adapter.html#method-i-report_changes","()","<p>Runs the callback and passes it the changes if there are any.\n"],["select_and_initialize","Listen::Adapter","Listen/Adapter.html#method-c-select_and_initialize","(directories, options = {}, &callback)","<p>Selects the appropriate adapter implementation for the current OS and\ninitializes it.\n<p>@param [String, …\n"],["setup","Listen::Listener","Listen/Listener.html#method-i-setup","()","<p>Build the directory record concurrently and initialize the adapter.\n"],["sha1_checksum","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-sha1_checksum","(path)","<p>Returns the SHA1-checksum for the file path.\n<p>@param [String] path the file path\n"],["signal","Listen::Turnstile","Listen/Turnstile.html#method-i-signal","()","<p>Unblocks the waiting thread if any.\n"],["start","Listen::Adapter","Listen/Adapter.html#method-i-start","()","<p>Starts the adapter and don&#39;t block the current thread.\n<p>@param [Boolean] blocking whether or not to …\n"],["start","Listen::Listener","Listen/Listener.html#method-i-start","(deprecated_blocking = nil)","<p>Starts the listener by initializing the adapter and building the directory\nrecord concurrently, then …\n"],["start!","Listen::Adapter","Listen/Adapter.html#method-i-start-21","()","<p>Starts the adapter and block the current thread.\n<p>@since 1.0.0\n"],["start!","Listen::Listener","Listen/Listener.html#method-i-start-21","()","<p>Starts the listener by initializing the adapter and building the directory\nrecord concurrently, then …\n"],["start_poller","Listen::Adapter","Listen/Adapter.html#method-i-start_poller","()","<p>This method starts a new thread which poll for changes detected by the\nadapter and report them back to …\n"],["start_worker","Listen::Adapter","Listen/Adapter.html#method-i-start_worker","()","<p>Should start the worker in a new thread.\n<p>@note Each adapter must override this method\n\n<pre>to start its worker ...</pre>\n"],["start_worker","Listen::Adapters::BSD","Listen/Adapters/BSD.html#method-i-start_worker","()","<p>Starts the worker in a new thread.\n<p>@see Listen::Adapter#start_worker\n"],["start_worker","Listen::Adapters::Darwin","Listen/Adapters/Darwin.html#method-i-start_worker","()","<p>Starts the worker in a new thread and sleep 0.1 second.\n<p>@see Listen::Adapter#start_worker\n"],["start_worker","Listen::Adapters::Linux","Listen/Adapters/Linux.html#method-i-start_worker","()","<p>Starts the worker in a new thread.\n<p>@see Listen::Adapter#start_worker\n"],["start_worker","Listen::Adapters::Polling","Listen/Adapters/Polling.html#method-i-start_worker","()","<p>@see Listen::Adapter#start_worker\n<p>@see Listen::Adapter#start_worker\n"],["start_worker","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-i-start_worker","()","<p>Start the worker in a new thread and sleep 0.1 second.\n<p>@see Listen::Adapter#start_worker\n"],["started?","Listen::Adapter","Listen/Adapter.html#method-i-started-3F","()","<p>Returns whether the adapter is started or not.\n<p>@return [Boolean] whether the adapter is started or not …\n"],["stop","Listen::Adapter","Listen/Adapter.html#method-i-stop","()","<p>Stops the adapter.\n"],["stop","Listen::Listener","Listen/Listener.html#method-i-stop","()","<p>Stops the listener.\n"],["target_os_regex","Listen::Adapters::BSD","Listen/Adapters/BSD.html#method-c-target_os_regex","()",""],["target_os_regex","Listen::Adapters::Darwin","Listen/Adapters/Darwin.html#method-c-target_os_regex","()",""],["target_os_regex","Listen::Adapters::Linux","Listen/Adapters/Linux.html#method-c-target_os_regex","()",""],["target_os_regex","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-c-target_os_regex","()",""],["to","Listen","Listen.html#method-c-to","(*args, &block)","<p>Listens to file system modifications on a either single directory or\nmultiple directories. When calling …\n"],["to!","Listen","Listen.html#method-c-to-21","(*args, &block)","<p>Listens to file system modifications on a either single directory or\nmultiple directories. When calling …\n"],["unpause","Listen::Adapter","Listen/Adapter.html#method-i-unpause","()","<p>Unpauses the adapter.\n"],["unpause","Listen::Listener","Listen/Listener.html#method-i-unpause","()","<p>Unpauses the listener.\n<p>@return [Listen::Listener] the listener\n"],["update_sha1_checksum","Listen::DirectoryRecord","Listen/DirectoryRecord.html#method-i-update_sha1_checksum","(path)","<p>Inserts a SHA1-checksum path in @SHA1-checksums hash.\n<p>@param [String] path the SHA1-checksum path to insert …\n"],["usable?","Listen::Adapter","Listen/Adapter.html#method-c-usable-3F","()","<p>Checks if the adapter is usable on target OS.\n<p>@return [Boolean] whether usable or not\n"],["usable?","Listen::Adapters::Windows","Listen/Adapters/Windows.html#method-c-usable-3F","()","<p>Checks if the adapter is usable on target OS.\n<p>@return [Boolean] whether usable or not\n"],["usable_and_works?","Listen::Adapter","Listen/Adapter.html#method-c-usable_and_works-3F","(directories, options = {})","<p>Checks if the adapter is usable and works on the current OS.\n<p>@param [String, Array&lt;String&gt;] directories …\n"],["wait","Listen::Turnstile","Listen/Turnstile.html#method-i-wait","()","<p>Blocks the current thread until a signal is received.\n"],["wait_for_callback","Listen::Adapter","Listen/Adapter.html#method-i-wait_for_callback","()","<p>Blocks the main thread until the poll thread runs the callback.\n"],["wait_for_changes","Listen::Adapter","Listen/Adapter.html#method-i-wait_for_changes","(threshold = 0)","<p>Blocks the main thread until N changes are detected.\n"],["warn_polling_fallback","Listen::Adapter","Listen/Adapter.html#method-c-warn_polling_fallback","(options)","<p>Warn of polling fallback unless the :polling_fallback_message has been set\nto false.\n<p>@param [String] warning …\n"],["works?","Listen::Adapter","Listen/Adapter.html#method-c-works-3F","(directory, options = {})","<p>Runs a tests to determine if the adapter can actually pick up changes in a\ngiven directory and returns …\n"]]}}