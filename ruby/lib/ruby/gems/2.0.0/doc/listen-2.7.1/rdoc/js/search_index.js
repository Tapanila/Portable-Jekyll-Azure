var search_data = {"index":{"searchIndex":["listen","adapter","bsd","base","darwin","linux","polling","tcp","windows","cli","change","directory","file","forwarder","listener","record","silencer","tcp","broadcaster","listener","message","_all_entries()","_async_change()","_change()","_change()","_change()","_change_pool()","_changes_path()","_content_modified?()","_default_ignore_patterns()","_default_ignored_directories_patterns()","_default_ignored_extensions_patterns()","_dir_change()","_dir_event?()","_directories_path()","_entries()","_entry_type()","_event_path()","_event_path()","_exist?()","_existing_path?()","_file_change()","_init_actors()","_init_debug()","_init_ignore_patterns()","_init_only_patterns()","_init_options()","_init_options()","_init_paths()","_init_worker()","_init_worker()","_init_worker()","_init_worker()","_latency()","_latency()","_lstat()","_mode()","_mode_modified?()","_modified?()","_mtime()","_nap_time()","_napped_loop()","_new_data()","_new_file_added?()","_new_path?()","_notify_change()","_notify_listener()","_path()","_poll_directories()","_pop_changes()","_record()","_record()","_record_data()","_record_data?()","_record_entries()","_recursive_scan?()","_relative_path()","_removed_path?()","_set_md5()","_set_record_data()","_silencer()","_skip_event?()","_smoosh_changes()","_unset_record_data()","_update_record()","_usable_adapter_class()","_wait_for_changes()","_warn_polling_fallback()","_watch_file()","_watch_for_new_file()","_worker_callback()","_worker_callback()","_worker_callback()","block()","boot_celluloid()","broadcast()","broadcaster?()","build()","change()","change()","dir_entries()","file_data()","finalize()","finalize()","from_buffer()","handle_connection()","handle_data()","handle_message()","ignore()","ignore!()","listen?()","mode=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","object=()","on()","only()","pause()","paused?()","payload=()","recipient?()","run()","run()","scan()","select()","set_path()","silenced?()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","stop()","stop()","target=()","to()","unicast()","unpause()","unset_path()","usable?()","usable?()","usable?()","usable?()","usable?()","usable?()","usable?()"],"longSearchIndex":["listen","listen::adapter","listen::adapter::bsd","listen::adapter::base","listen::adapter::darwin","listen::adapter::linux","listen::adapter::polling","listen::adapter::tcp","listen::adapter::windows","listen::cli","listen::change","listen::directory","listen::file","listen::forwarder","listen::listener","listen::record","listen::silencer","listen::tcp","listen::tcp::broadcaster","listen::tcp::listener","listen::tcp::message","listen::directory#_all_entries()","listen::directory#_async_change()","listen::adapter::bsd#_change()","listen::adapter::linux#_change()","listen::adapter::windows#_change()","listen::directory#_change_pool()","listen::adapter::darwin#_changes_path()","listen::file#_content_modified?()","listen::silencer#_default_ignore_patterns()","listen::silencer#_default_ignored_directories_patterns()","listen::silencer#_default_ignored_extensions_patterns()","listen::change#_dir_change()","listen::adapter::linux#_dir_event?()","listen::adapter::base#_directories_path()","listen::directory#_entries()","listen::directory#_entry_type()","listen::adapter::bsd#_event_path()","listen::adapter::linux#_event_path()","listen::file#_exist?()","listen::file#_existing_path?()","listen::change#_file_change()","listen::listener#_init_actors()","listen::listener#_init_debug()","listen::silencer#_init_ignore_patterns()","listen::silencer#_init_only_patterns()","listen::listener#_init_options()","listen::tcp::listener#_init_options()","listen::record#_init_paths()","listen::adapter::bsd#_init_worker()","listen::adapter::darwin#_init_worker()","listen::adapter::linux#_init_worker()","listen::adapter::windows#_init_worker()","listen::adapter::base#_latency()","listen::adapter::polling#_latency()","listen::file#_lstat()","listen::file#_mode()","listen::file#_mode_modified?()","listen::file#_modified?()","listen::file#_mtime()","listen::adapter::polling#_nap_time()","listen::adapter::polling#_napped_loop()","listen::file#_new_data()","listen::adapter::bsd#_new_file_added?()","listen::file#_new_path?()","listen::adapter::base#_notify_change()","listen::change#_notify_listener()","listen::adapter::windows#_path()","listen::adapter::polling#_poll_directories()","listen::listener#_pop_changes()","listen::directory#_record()","listen::file#_record()","listen::file#_record_data()","listen::file#_record_data?()","listen::directory#_record_entries()","listen::directory#_recursive_scan?()","listen::silencer#_relative_path()","listen::file#_removed_path?()","listen::file#_set_md5()","listen::file#_set_record_data()","listen::change#_silencer()","listen::adapter::linux#_skip_event?()","listen::listener#_smoosh_changes()","listen::file#_unset_record_data()","listen::directory#_update_record()","listen::adapter::_usable_adapter_class()","listen::listener#_wait_for_changes()","listen::adapter::_warn_polling_fallback()","listen::adapter::bsd#_watch_file()","listen::adapter::bsd#_watch_for_new_file()","listen::adapter::bsd#_worker_callback()","listen::adapter::linux#_worker_callback()","listen::adapter::windows#_worker_callback()","listen::tcp::listener#block()","listen::boot_celluloid()","listen::tcp::broadcaster#broadcast()","listen::tcp::listener#broadcaster?()","listen::record#build()","listen::change#change()","listen::file#change()","listen::record#dir_entries()","listen::record#file_data()","listen::adapter::tcp#finalize()","listen::tcp::broadcaster#finalize()","listen::tcp::message::from_buffer()","listen::tcp::broadcaster#handle_connection()","listen::adapter::tcp#handle_data()","listen::adapter::tcp#handle_message()","listen::listener#ignore()","listen::listener#ignore!()","listen::listener#listen?()","listen::tcp::listener#mode=()","listen::adapter::base::new()","listen::adapter::darwin::new()","listen::adapter::linux::new()","listen::change::new()","listen::directory::new()","listen::file::new()","listen::forwarder::new()","listen::listener::new()","listen::record::new()","listen::silencer::new()","listen::tcp::broadcaster::new()","listen::tcp::listener::new()","listen::tcp::message::new()","listen::tcp::message#object=()","listen::on()","listen::listener#only()","listen::listener#pause()","listen::listener#paused?()","listen::tcp::message#payload=()","listen::tcp::listener#recipient?()","listen::adapter::tcp#run()","listen::tcp::broadcaster#run()","listen::directory#scan()","listen::adapter::select()","listen::record#set_path()","listen::silencer#silenced?()","listen::adapter::bsd#start()","listen::adapter::base#start()","listen::adapter::darwin#start()","listen::adapter::linux#start()","listen::adapter::polling#start()","listen::adapter::tcp#start()","listen::adapter::windows#start()","listen::cli#start()","listen::forwarder#start()","listen::listener#start()","listen::tcp::broadcaster#start()","listen::tcp::listener#start()","listen::stop()","listen::listener#stop()","listen::tcp::listener#target=()","listen::to()","listen::tcp::broadcaster#unicast()","listen::listener#unpause()","listen::record#unset_path()","listen::adapter::bsd::usable?()","listen::adapter::base::usable?()","listen::adapter::darwin::usable?()","listen::adapter::linux::usable?()","listen::adapter::polling::usable?()","listen::adapter::tcp::usable?()","listen::adapter::windows::usable?()"],"info":[["Listen","","Listen.html","",""],["Listen::Adapter","","Listen/Adapter.html","",""],["Listen::Adapter::BSD","","Listen/Adapter/BSD.html","","<p>Listener implementation for BSD&#39;s `kqueue`.\n"],["Listen::Adapter::Base","","Listen/Adapter/Base.html","",""],["Listen::Adapter::Darwin","","Listen/Adapter/Darwin.html","","<p>Adapter implementation for Mac OS X `FSEvents`.\n"],["Listen::Adapter::Linux","","Listen/Adapter/Linux.html","","<p>Listener implementation for Linux `inotify`.\n"],["Listen::Adapter::Polling","","Listen/Adapter/Polling.html","","<p>Polling Adapter that works cross-platform and has no dependencies. This is\nthe adapter that uses the â€¦\n"],["Listen::Adapter::TCP","","Listen/Adapter/TCP.html","","<p>Adapter to receive file system modifications over TCP\n"],["Listen::Adapter::Windows","","Listen/Adapter/Windows.html","","<p>Adapter implementation for Windows `wdm`.\n"],["Listen::CLI","","Listen/CLI.html","",""],["Listen::Change","","Listen/Change.html","",""],["Listen::Directory","","Listen/Directory.html","",""],["Listen::File","","Listen/File.html","",""],["Listen::Forwarder","","Listen/Forwarder.html","",""],["Listen::Listener","","Listen/Listener.html","",""],["Listen::Record","","Listen/Record.html","",""],["Listen::Silencer","","Listen/Silencer.html","",""],["Listen::TCP","","Listen/TCP.html","",""],["Listen::TCP::Broadcaster","","Listen/TCP/Broadcaster.html","",""],["Listen::TCP::Listener","","Listen/TCP/Listener.html","",""],["Listen::TCP::Message","","Listen/TCP/Message.html","",""],["_all_entries","Listen::Directory","Listen/Directory.html#method-i-_all_entries","()",""],["_async_change","Listen::Directory","Listen/Directory.html#method-i-_async_change","(entry_path, options)",""],["_change","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_change","(event_flags)",""],["_change","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_change","(event_flags)",""],["_change","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_change","(type)",""],["_change_pool","Listen::Directory","Listen/Directory.html#method-i-_change_pool","()",""],["_changes_path","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_changes_path","(changes)",""],["_content_modified?","Listen::File","Listen/File.html#method-i-_content_modified-3F","()","<p>Only useful on Darwin because of the file mtime second precision. Only\ncheck if in the same seconds (mtime â€¦\n"],["_default_ignore_patterns","Listen::Silencer","Listen/Silencer.html#method-i-_default_ignore_patterns","()",""],["_default_ignored_directories_patterns","Listen::Silencer","Listen/Silencer.html#method-i-_default_ignored_directories_patterns","()",""],["_default_ignored_extensions_patterns","Listen::Silencer","Listen/Silencer.html#method-i-_default_ignored_extensions_patterns","()",""],["_dir_change","Listen::Change","Listen/Change.html#method-i-_dir_change","(path, options)",""],["_dir_event?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_dir_event-3F","(event)",""],["_directories_path","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_directories_path","()",""],["_entries","Listen::Directory","Listen/Directory.html#method-i-_entries","()",""],["_entry_type","Listen::Directory","Listen/Directory.html#method-i-_entry_type","(entry_path)",""],["_event_path","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_event_path","(event)",""],["_event_path","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_event_path","(event)",""],["_exist?","Listen::File","Listen/File.html#method-i-_exist-3F","()",""],["_existing_path?","Listen::File","Listen/File.html#method-i-_existing_path-3F","()",""],["_file_change","Listen::Change","Listen/Change.html#method-i-_file_change","(path, options)",""],["_init_actors","Listen::Listener","Listen/Listener.html#method-i-_init_actors","()",""],["_init_debug","Listen::Listener","Listen/Listener.html#method-i-_init_debug","()",""],["_init_ignore_patterns","Listen::Silencer","Listen/Silencer.html#method-i-_init_ignore_patterns","()",""],["_init_only_patterns","Listen::Silencer","Listen/Silencer.html#method-i-_init_only_patterns","()",""],["_init_options","Listen::Listener","Listen/Listener.html#method-i-_init_options","(options = {})",""],["_init_options","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-_init_options","(options = {})",""],["_init_paths","Listen::Record","Listen/Record.html#method-i-_init_paths","()",""],["_init_worker","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_init_worker","()","<p>Initializes a kqueue Queue and adds a watcher for each files in the\ndirectories passed to the adapter. â€¦\n"],["_init_worker","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-_init_worker","()","<p>Initializes a FSEvent worker and adds a watcher for each directory\nlistened.\n"],["_init_worker","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_init_worker","()","<p>Initializes a INotify worker and adds a watcher for each directory passed\nto the adapter.\n<p>@return [INotify::Notifier] â€¦\n"],["_init_worker","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_init_worker","()","<p>Initializes a WDM monitor and adds a watcher for each directory passed to\nthe adapter.\n<p>@return [WDM::Monitor] â€¦\n"],["_latency","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_latency","()",""],["_latency","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_latency","()",""],["_lstat","Listen::File","Listen/File.html#method-i-_lstat","()",""],["_mode","Listen::File","Listen/File.html#method-i-_mode","()",""],["_mode_modified?","Listen::File","Listen/File.html#method-i-_mode_modified-3F","()",""],["_modified?","Listen::File","Listen/File.html#method-i-_modified-3F","()",""],["_mtime","Listen::File","Listen/File.html#method-i-_mtime","()",""],["_nap_time","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_nap_time","()",""],["_napped_loop","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_napped_loop","()",""],["_new_data","Listen::File","Listen/File.html#method-i-_new_data","()",""],["_new_file_added?","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_new_file_added-3F","(event)",""],["_new_path?","Listen::File","Listen/File.html#method-i-_new_path-3F","()",""],["_notify_change","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-_notify_change","(path, options)",""],["_notify_listener","Listen::Change","Listen/Change.html#method-i-_notify_listener","(change, path)",""],["_path","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_path","(path)",""],["_poll_directories","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-_poll_directories","()",""],["_pop_changes","Listen::Listener","Listen/Listener.html#method-i-_pop_changes","()",""],["_record","Listen::Directory","Listen/Directory.html#method-i-_record","()",""],["_record","Listen::File","Listen/File.html#method-i-_record","()",""],["_record_data","Listen::File","Listen/File.html#method-i-_record_data","()",""],["_record_data?","Listen::File","Listen/File.html#method-i-_record_data-3F","()",""],["_record_entries","Listen::Directory","Listen/Directory.html#method-i-_record_entries","()",""],["_recursive_scan?","Listen::Directory","Listen/Directory.html#method-i-_recursive_scan-3F","(path)",""],["_relative_path","Listen::Silencer","Listen/Silencer.html#method-i-_relative_path","(path)",""],["_removed_path?","Listen::File","Listen/File.html#method-i-_removed_path-3F","()",""],["_set_md5","Listen::File","Listen/File.html#method-i-_set_md5","()",""],["_set_record_data","Listen::File","Listen/File.html#method-i-_set_record_data","()",""],["_silencer","Listen::Change","Listen/Change.html#method-i-_silencer","()",""],["_skip_event?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_skip_event-3F","(event)",""],["_smoosh_changes","Listen::Listener","Listen/Listener.html#method-i-_smoosh_changes","(changes)",""],["_unset_record_data","Listen::File","Listen/File.html#method-i-_unset_record_data","()",""],["_update_record","Listen::Directory","Listen/Directory.html#method-i-_update_record","()",""],["_usable_adapter_class","Listen::Adapter","Listen/Adapter.html#method-c-_usable_adapter_class","()",""],["_wait_for_changes","Listen::Listener","Listen/Listener.html#method-i-_wait_for_changes","()",""],["_warn_polling_fallback","Listen::Adapter","Listen/Adapter.html#method-c-_warn_polling_fallback","(options)",""],["_watch_file","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_watch_file","(path, queue)",""],["_watch_for_new_file","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_watch_for_new_file","(event)",""],["_worker_callback","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-_worker_callback","()",""],["_worker_callback","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-_worker_callback","()",""],["_worker_callback","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-_worker_callback","()",""],["block","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-block","()","<p>Hook to broadcast changes over TCP\n"],["boot_celluloid","Listen","Listen.html#method-c-boot_celluloid","()",""],["broadcast","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-broadcast","(payload)","<p>Broadcasts given payload to all connected sockets\n"],["broadcaster?","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-broadcaster-3F","()",""],["build","Listen::Record","Listen/Record.html#method-i-build","()",""],["change","Listen::Change","Listen/Change.html#method-i-change","(path, options)",""],["change","Listen::File","Listen/File.html#method-i-change","()",""],["dir_entries","Listen::Record","Listen/Record.html#method-i-dir_entries","(path)",""],["file_data","Listen::Record","Listen/Record.html#method-i-file_data","(path)",""],["finalize","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-finalize","()","<p>Cleans up buffer and socket\n"],["finalize","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-finalize","()","<p>Cleans up sockets and server\n"],["from_buffer","Listen::TCP::Message","Listen/TCP/Message.html#method-c-from_buffer","(buffer)","<p>Extracts a message from given buffer\n"],["handle_connection","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-handle_connection","(socket)","<p>Handles incoming socket connection\n"],["handle_data","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-handle_data","(data)","<p>Buffers incoming data and handles messages accordingly\n"],["handle_message","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-handle_message","(message)","<p>Handles incoming message by notifying of path changes\n"],["ignore","Listen::Listener","Listen/Listener.html#method-i-ignore","(regexps)","<p>Adds ignore patterns to the existing one (See DEFAULT_IGNORED_DIRECTORIES\nand DEFAULT_IGNORED_EXTENSIONS â€¦\n"],["ignore!","Listen::Listener","Listen/Listener.html#method-i-ignore-21","(regexps)","<p>Overwrites ignore patterns (See DEFAULT_IGNORED_DIRECTORIES and\nDEFAULT_IGNORED_EXTENSIONS in Listen::Silencer â€¦\n"],["listen?","Listen::Listener","Listen/Listener.html#method-i-listen-3F","()","<p>Returns true if Listener is neither paused nor stopped\n<p>@return [Boolean]\n"],["mode=","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-mode-3D","(mode)","<p>Sets listener mode\n<p>@param [Symbol] mode (either :broadcaster or :recipient)\n"],["new","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-new","(listener)",""],["new","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-c-new","(listener)",""],["new","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-c-new","(listener)",""],["new","Listen::Change","Listen/Change.html#method-c-new","(listener)",""],["new","Listen::Directory","Listen/Directory.html#method-c-new","(listener, path, options = {})",""],["new","Listen::File","Listen/File.html#method-c-new","(listener, path)",""],["new","Listen::Forwarder","Listen/Forwarder.html#method-c-new","(options)",""],["new","Listen::Listener","Listen/Listener.html#method-c-new","(*args, &block)","<p>Initializes the directories listener.\n<p>@param [String] directory the directories to listen to @param [Hash] â€¦\n"],["new","Listen::Record","Listen/Record.html#method-c-new","(listener)",""],["new","Listen::Silencer","Listen/Silencer.html#method-c-new","(listener)",""],["new","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-c-new","(host, port)","<p>Initializes a Celluloid::IO-powered TCP-broadcaster\n<p>@param [String] host to broadcast on @param [String] â€¦\n"],["new","Listen::TCP::Listener","Listen/TCP/Listener.html#method-c-new","(target, mode, *args, &block)","<p>Initializes a listener to broadcast or receive modifications over TCP\n<p>@param [String/Fixnum] target to â€¦\n"],["new","Listen::TCP::Message","Listen/TCP/Message.html#method-c-new","(object = nil)","<p>Initializes a new message\n<p>@param [Object] object to initialize message with\n"],["object=","Listen::TCP::Message","Listen/TCP/Message.html#method-i-object-3D","(obj)","<p>Generates message size and payload for given object\n"],["on","Listen","Listen.html#method-c-on","(target, *args, &block)","<p>Listens to file system modifications broadcast over TCP.\n<p>@param [String/Fixnum] target to listen on (hostname:port â€¦\n"],["only","Listen::Listener","Listen/Listener.html#method-i-only","(regexps)","<p>Sets only patterns, to listen only to specific regexps\n<p>@param [Regexp, Array&lt;Regexp&gt;] new ignoring â€¦\n"],["pause","Listen::Listener","Listen/Listener.html#method-i-pause","()","<p>Pauses listening callback (adapter still running)\n"],["paused?","Listen::Listener","Listen/Listener.html#method-i-paused-3F","()","<p>Returns true if Listener is paused\n<p>@return [Boolean]\n"],["payload=","Listen::TCP::Message","Listen/TCP/Message.html#method-i-payload-3D","(payload)","<p>Extracts message size and loads object from given payload\n"],["recipient?","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-recipient-3F","()",""],["run","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-run","()","<p>Continuously receive and asynchronously handle data\n"],["run","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-run","()","<p>Continuously accept and handle incoming connections\n"],["scan","Listen::Directory","Listen/Directory.html#method-i-scan","()",""],["select","Listen::Adapter","Listen/Adapter.html#method-c-select","(options = {})",""],["set_path","Listen::Record","Listen/Record.html#method-i-set_path","(path, data)",""],["silenced?","Listen::Silencer","Listen/Silencer.html#method-i-silenced-3F","(path, type = 'Unknown')",""],["start","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-i-start","()",""],["start","Listen::Adapter::Base","Listen/Adapter/Base.html#method-i-start","()",""],["start","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-i-start","()",""],["start","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-i-start","()",""],["start","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-i-start","()",""],["start","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-i-start","()","<p>Initializes and starts a Celluloid::IO-powered TCP-recipient\n"],["start","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-i-start","()",""],["start","Listen::CLI","Listen/CLI.html#method-i-start","()",""],["start","Listen::Forwarder","Listen/Forwarder.html#method-i-start","()",""],["start","Listen::Listener","Listen/Listener.html#method-i-start","()","<p>Starts the listener by initializing the adapter and building the directory\nrecord concurrently, then â€¦\n"],["start","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-start","()","<p>Asynchronously start accepting connections\n"],["start","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-start","()","<p>Initializes and starts TCP broadcaster\n"],["stop","Listen","Listen.html#method-c-stop","()","<p>Stop all listeners &amp; Celluloid Use it for testing purpose or when you\nare sure that Celluloid could â€¦\n"],["stop","Listen::Listener","Listen/Listener.html#method-i-stop","()","<p>Terminates all Listen actors and kill the adapter.\n"],["target=","Listen::TCP::Listener","Listen/TCP/Listener.html#method-i-target-3D","(target)","<p>Sets listener target\n<p>@param [String/Fixnum] target to listen on (hostname:port or port)\n"],["to","Listen","Listen.html#method-c-to","(*args, &block)","<p>Listens to file system modifications on a either single directory or\nmultiple directories.\n<p>When :forward_to â€¦\n"],["unicast","Listen::TCP::Broadcaster","Listen/TCP/Broadcaster.html#method-i-unicast","(socket, payload)","<p>Unicasts payload to given socket\n<p>@return [Boolean] whether writing to socket was succesful\n"],["unpause","Listen::Listener","Listen/Listener.html#method-i-unpause","()","<p>Unpauses listening callback\n"],["unset_path","Listen::Record","Listen/Record.html#method-i-unset_path","(path)",""],["usable?","Listen::Adapter::BSD","Listen/Adapter/BSD.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Base","Listen/Adapter/Base.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Darwin","Listen/Adapter/Darwin.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Linux","Listen/Adapter/Linux.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Polling","Listen/Adapter/Polling.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::TCP","Listen/Adapter/TCP.html#method-c-usable-3F","()",""],["usable?","Listen::Adapter::Windows","Listen/Adapter/Windows.html#method-c-usable-3F","()",""]]}}