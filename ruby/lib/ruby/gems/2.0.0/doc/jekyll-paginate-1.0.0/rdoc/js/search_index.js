var search_data = {"index":{"searchIndex":["jekyll","paginate","pager","pagination","calculate_pages()","ensure_leading_slash()","first_page_url()","generate()","in_hierarchy()","new()","paginate()","paginate_path()","pagination_candidate?()","pagination_enabled?()","remove_leading_slash()","template_page()","to_liquid()"],"longSearchIndex":["jekyll","jekyll::paginate","jekyll::paginate::pager","jekyll::paginate::pagination","jekyll::paginate::pager::calculate_pages()","jekyll::paginate::pager::ensure_leading_slash()","jekyll::paginate::pagination::first_page_url()","jekyll::paginate::pagination#generate()","jekyll::paginate::pager::in_hierarchy()","jekyll::paginate::pager::new()","jekyll::paginate::pagination#paginate()","jekyll::paginate::pager::paginate_path()","jekyll::paginate::pager::pagination_candidate?()","jekyll::paginate::pager::pagination_enabled?()","jekyll::paginate::pager::remove_leading_slash()","jekyll::paginate::pagination#template_page()","jekyll::paginate::pager#to_liquid()"],"info":[["Jekyll","","Jekyll.html","",""],["Jekyll::Paginate","","Jekyll/Paginate.html","",""],["Jekyll::Paginate::Pager","","Jekyll/Paginate/Pager.html","",""],["Jekyll::Paginate::Pagination","","Jekyll/Paginate/Pagination.html","",""],["calculate_pages","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-calculate_pages","(all_posts, per_page)","<p>Calculate the number of pages.\n<p>all_posts - The Array of all Posts. per_page  - The Integer of entries …\n"],["ensure_leading_slash","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-ensure_leading_slash","(path)","<p>Static: Return a String version of the input which has a leading slash.\n\n<pre>If the input already has a forward ...</pre>\n"],["first_page_url","Jekyll::Paginate::Pagination","Jekyll/Paginate/Pagination.html#method-c-first_page_url","(site)","<p>Static: Fetch the URL of the template page. Used to determine the\n\n<pre>path to the first pager in the series.</pre>\n"],["generate","Jekyll::Paginate::Pagination","Jekyll/Paginate/Pagination.html#method-i-generate","(site)","<p>Generate paginated pages if necessary.\n<p>site - The Site.\n<p>Returns nothing.\n"],["in_hierarchy","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-in_hierarchy","(source, page_dir, paginate_path)","<p>Determine if the subdirectories of the two paths are the same relative to\nsource\n<p>source        - the site …\n"],["new","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-new","(site, page, all_posts, num_pages = nil)","<p>Initialize a new Pager.\n<p>site     - the Jekyll::Site object page      - The Integer page number.\nall_posts …\n"],["paginate","Jekyll::Paginate::Pagination","Jekyll/Paginate/Pagination.html#method-i-paginate","(site, page)","<p>Paginates the blog&#39;s posts. Renders the index.html file into paginated\ndirectories, e.g.: page2/index.html …\n"],["paginate_path","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-paginate_path","(site, num_page)","<p>Static: Return the pagination path of the page\n<p>site     - the Jekyll::Site object num_page - the pagination …\n"],["pagination_candidate?","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-pagination_candidate-3F","(config, page)","<p>Static: Determine if a page is a possible candidate to be a template page.\n\n<pre>Page&#39;s name must be `index.html` ...</pre>\n"],["pagination_enabled?","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-pagination_enabled-3F","(site)","<p>Determine if pagination is enabled the site.\n<p>site - the Jekyll::Site object\n<p>Returns true if pagination …\n"],["remove_leading_slash","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-c-remove_leading_slash","(path)","<p>Static: Return a String version of the input without a leading slash.\n<p>path - a String path\n<p>Returns the …\n"],["template_page","Jekyll::Paginate::Pagination","Jekyll/Paginate/Pagination.html#method-i-template_page","(site)","<p>Public: Find the Jekyll::Page which will act as the pager template\n<p>site - the Jekyll::Site object\n<p>Returns …\n"],["to_liquid","Jekyll::Paginate::Pager","Jekyll/Paginate/Pager.html#method-i-to_liquid","()","<p>Convert this Pager&#39;s data to a Hash suitable for use by Liquid.\n<p>Returns the Hash representation of …\n"]]}}